From 6e096bda1eed2db12cea1cc3efad75aff9097e03 Mon Sep 17 00:00:00 2001
From: Cui Mingrui <cuimingrui@wxiat.com>
Date: Tue, 7 Jun 2022 17:42:36 +0800
Subject: [PATCH] sw64: fix ip checksum calculation
Patch-mainline: NO, OTHERS
References: openEuler-22.03-LTS
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I56W9F

--------------------------------

When dest address is not aligned, the checksum result is incorrect. This
is caused by wrong usage of insll and inshl.

Signed-off-by: Cui Mingrui <cuimingrui@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/lib/checksum.c          | 8 ++++----
 arch/sw_64/lib/csum_partial_copy.c | 8 ++++----
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/arch/sw_64/lib/checksum.c b/arch/sw_64/lib/checksum.c
index 1531b09cad11..d1314caa15bf 100644
--- a/arch/sw_64/lib/checksum.c
+++ b/arch/sw_64/lib/checksum.c
@@ -76,23 +76,23 @@ static inline unsigned long do_csum(const unsigned char *buff, int len)
 	} else {
 		dst = (unsigned long *)((unsigned long)dst & (~7UL));
 		word = *dst;
-		inshl(word, doff, partial_dest);
+		inshl(word, 8 - doff, partial_dest);
 		dst++;
 
 		while (len >= 0) {
 			word = *dst;
-			insll(word, doff, second_dest);
+			insll(word, 8 - doff, second_dest);
 			patch = partial_dest | second_dest;
 			checksum += patch;
 			checksum += (checksum < patch);
-			inshl(word, doff, partial_dest);
+			inshl(word, 8 - doff, partial_dest);
 			dst++;
 			len -= 8;
 		}
 
 		len += 8;
 		word = *dst;
-		insll(word, doff, second_dest);
+		insll(word, 8 - doff, second_dest);
 		patch = partial_dest | second_dest;
 		maskll(patch, len, patch);
 		checksum += patch;
diff --git a/arch/sw_64/lib/csum_partial_copy.c b/arch/sw_64/lib/csum_partial_copy.c
index f45d64631281..441ae5575de5 100644
--- a/arch/sw_64/lib/csum_partial_copy.c
+++ b/arch/sw_64/lib/csum_partial_copy.c
@@ -93,23 +93,23 @@ csum_partial_cfu_dest_unaligned(const unsigned long __user *src,
 
 	dst = (unsigned long *)((unsigned long)dst & (~7UL));
 	word = *dst;
-	inshl(word, doff, partial_dest);
+	inshl(word, 8 - doff, partial_dest);
 	dst++;
 
 	while (len >= 0) {
 		word = *dst;
-		insll(word, doff, second_dest);
+		insll(word, 8 - doff, second_dest);
 		patch = partial_dest | second_dest;
 		checksum += patch;
 		checksum += (checksum < patch);
-		inshl(word, doff, partial_dest);
+		inshl(word, 8 - doff, partial_dest);
 		dst++;
 		len -= 8;
 	}
 
 	len += 8;
 	word = *dst;
-	insll(word, doff, second_dest);
+	insll(word, 8 - doff, second_dest);
 	patch = partial_dest | second_dest;
 	maskll(patch, len, patch);
 	checksum += patch;
-- 
2.34.1

