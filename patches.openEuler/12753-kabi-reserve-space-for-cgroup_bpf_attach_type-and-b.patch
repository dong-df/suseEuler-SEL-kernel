From 7623fa5d5dc7357dd70df43f54476101d06f8214 Mon Sep 17 00:00:00 2001
From: Lu Jialin <lujialin4@huawei.com>
Date: Fri, 7 Jan 2022 23:05:22 +0800
Subject: [PATCH] kabi: reserve space for cgroup_bpf_attach_type and
 bpf_cgroup_storage_type
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 7623fa5d5dc7357dd70df43f54476101d06f8214
Modified-by-SEL: Yes, refreshed due to context changes


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4GII8?from=project-issue
CVE: NA

--------

We reserve some fields beforehand for cgroup_bpf_attach_type and bpf_cgroup_storage_type
prone to change, therefore, we can hot add/change features of bpf cgroup
with this enhancement.

After reserving, normally cache does not matter as the reserved fields
are not accessed at all.

Signed-off-by: Lu Jialin <lujialin4@huawei.com>
Reviewed-by: weiyang wang <wangweiyang2@huawei.com>
Reviewed-by: Wei Yongjun <weiyongjun1@huawei.com>
Reviewed-by: Wei Yongjun<weiyongjun1@huawei.com>
Reviewed-by: weiyang wang <wangweiyang2@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/bpf-cgroup-defs.h | 8 ++++++++
 include/linux/bpf.h        | 8 ++++++++
 2 files changed, 16 insertions(+)

--- a/include/linux/bpf-cgroup-defs.h
+++ b/include/linux/bpf-cgroup-defs.h
@@ -36,6 +36,14 @@ enum cgroup_bpf_attach_type {
 	CGROUP_INET4_GETSOCKNAME,
 	CGROUP_INET6_GETSOCKNAME,
 	CGROUP_INET_SOCK_RELEASE,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_1,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_2,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_3,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_4,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_5,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_6,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_7,
+	CGROUP_ATTACH_TYPE_KABI_RESERVE_8,
 	MAX_CGROUP_BPF_ATTACH_TYPE
 };
 
--- a/include/linux/bpf.h
+++ b/include/linux/bpf.h
@@ -610,6 +610,14 @@ struct bpf_prog_offload {
 enum bpf_cgroup_storage_type {
 	BPF_CGROUP_STORAGE_SHARED,
 	BPF_CGROUP_STORAGE_PERCPU,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_1,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_2,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_3,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_4,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_5,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_6,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_7,
+	BPF_CGROUP_STORAGE_KABI_RESERVE_8,
 	__BPF_CGROUP_STORAGE_MAX
 };
 
