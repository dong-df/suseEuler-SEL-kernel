From a885e3f9e457a7cbbd889a8838715a8830390f7b Mon Sep 17 00:00:00 2001
From: Xunlei Pang <xlpang@linux.alibaba.com>
Date: Thu, 11 Nov 2021 16:28:37 +0800
Subject: [PATCH] psi: support psi under cgroup v1
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: a885e3f9e457a7cbbd889a8838715a8830390f7b
Modified-by-SEL: Yes, refreshed due to context change


Export "cpu|io|memory.pressure" to cgroup v1 "cpuacct" subsystem.

hulk inclusion
category: feature
bugzilla: 182979 https://gitee.com/openeuler/kernel/issues/I4HOX6

------------------------------------------

Reviewed-by: Joseph Qi <joseph.qi@linux.alibaba.com>
Signed-off-by: Xunlei Pang <xlpang@linux.alibaba.com>
Signed-off-by: Chen Wandun <chenwandun@huawei.com>
Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 init/Kconfig           |   10 ++++++++++
 kernel/cgroup/cgroup.c |   28 ++++++++++++++++++++++++++++
 kernel/sched/cpuacct.c |   10 ++++++++++
 kernel/sched/psi.c     |    4 ++++
 kernel/sched/sched.h   |    4 ++++
 5 files changed, 56 insertions(+)

--- a/init/Kconfig
+++ b/init/Kconfig
@@ -635,6 +635,16 @@ config PSI_DEFAULT_DISABLED
 
 	  Say N if unsure.
 
+config PSI_CGROUP_V1
+	bool "Support PSI under cgroup v1"
+	default Y
+	depends on PSI
+	help
+	  If set, pressure stall information tracking will be used
+	  for cgroup v1 other than v2.
+
+	  Say N if unsure.
+
 endmenu # "CPU/Task time and stats accounting"
 
 config CPU_ISOLATION
--- a/kernel/cgroup/cgroup.c
+++ b/kernel/cgroup/cgroup.c
@@ -3708,6 +3708,34 @@ static void cgroup_pressure_release(stru
 
 	psi_trigger_destroy(ctx->psi.trigger);
 }
+
+struct cftype cgroup_v1_psi_files[] = {
+	{
+		.name = "io.pressure",
+		.flags = CFTYPE_NO_PREFIX,
+		.seq_show = cgroup_io_pressure_show,
+		.write = cgroup_io_pressure_write,
+		.poll = cgroup_pressure_poll,
+		.release = cgroup_pressure_release,
+	},
+	{
+		.name = "memory.pressure",
+		.flags = CFTYPE_NO_PREFIX,
+		.seq_show = cgroup_memory_pressure_show,
+		.write = cgroup_memory_pressure_write,
+		.poll = cgroup_pressure_poll,
+		.release = cgroup_pressure_release,
+	},
+	{
+		.name = "cpu.pressure",
+		.flags = CFTYPE_NO_PREFIX,
+		.seq_show = cgroup_cpu_pressure_show,
+		.write = cgroup_cpu_pressure_write,
+		.poll = cgroup_pressure_poll,
+		.release = cgroup_pressure_release,
+	},
+	{ } /* terminate */
+};
 #endif /* CONFIG_PSI */
 
 static int cgroup_freeze_show(struct seq_file *seq, void *v)
--- a/kernel/sched/cpuacct.c
+++ b/kernel/sched/cpuacct.c
@@ -374,3 +374,13 @@ struct cgroup_subsys cpuacct_cgrp_subsys
 	.legacy_cftypes	= files,
 	.early_init	= true,
 };
+
+#ifdef CONFIG_PSI
+static int __init cgroup_v1_psi_init(void)
+{
+	cgroup_add_legacy_cftypes(&cpuacct_cgrp_subsys, cgroup_v1_psi_files);
+	return 0;
+}
+
+late_initcall_sync(cgroup_v1_psi_init);
+#endif
--- a/kernel/sched/psi.c
+++ b/kernel/sched/psi.c
@@ -752,7 +752,11 @@ static struct psi_group *iterate_groups(
 	struct cgroup *cgroup = NULL;
 
 	if (!*iter)
+#ifdef CONFIG_PSI_CGROUP_V1
+		cgroup = task_cgroup(task, cpuacct_cgrp_id);
+#else
 		cgroup = task->cgroups->dfl_cgrp;
+#endif
 	else if (*iter == &psi_system)
 		return NULL;
 	else
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2581,6 +2581,10 @@ unsigned long scale_irq_capacity(unsigne
 }
 #endif
 
+#ifdef CONFIG_PSI
+extern struct cftype cgroup_v1_psi_files[];
+#endif
+
 #if defined(CONFIG_ENERGY_MODEL) && defined(CONFIG_CPU_FREQ_GOV_SCHEDUTIL)
 
 #define perf_domain_span(pd) (to_cpumask(((pd)->em_pd->cpus)))
