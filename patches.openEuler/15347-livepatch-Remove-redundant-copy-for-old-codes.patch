From 67376115679e093c5c9c58e97d1675fce60ad50e Mon Sep 17 00:00:00 2001
From: Zheng Yejian <zhengyejian1@huawei.com>
Date: Tue, 10 May 2022 23:04:35 +0800
Subject: [PATCH] livepatch: Remove redundant copy for old codes
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 67376115679e093c5c9c58e97d1675fce60ad50e
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I53WZ9

--------------------------------

Before commit ec7ce700674f ("[Huawei] livepatch: put memory alloc and
free out stop machine"), procedure of restore codes of old function in
'arch_klp_unpatch_func' is like:
  1. copy old codes which saved in func_node into array 'old_insns';
  2. free memory of func_node;
  3. patch text with old codes in array 'old_insns';

But after above commit, operation of freeing memory of func_node in
procedure 2 is done after 'arch_klp_unpatch_func' succeed. And then
operation of copying old codes in procedure 1 seems redundant, so we
can just remove it.

Suggested-by: Xu Kuohai <xukuohai@huawei.com>
Signed-off-by: Zheng Yejian <zhengyejian1@huawei.com>
Reviewed-by: Kuohai Xu <xukuohai@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm/kernel/livepatch.c        | 14 ++++----------
 arch/arm64/kernel/livepatch.c      | 14 ++------------
 arch/powerpc/kernel/livepatch_32.c |  7 +------
 arch/powerpc/kernel/livepatch_64.c |  7 +------
 4 files changed, 8 insertions(+), 34 deletions(-)

diff --git a/arch/arm/kernel/livepatch.c b/arch/arm/kernel/livepatch.c
index d9eae1dd9744..21efd265149a 100644
--- a/arch/arm/kernel/livepatch.c
+++ b/arch/arm/kernel/livepatch.c
@@ -423,24 +423,18 @@ void arch_klp_unpatch_func(struct klp_func *func)
 	struct klp_func_node *func_node;
 	struct klp_func *next_func;
 	unsigned long pc;
-#ifdef CONFIG_ARM_MODULE_PLTS
-	int i;
-	u32 insns[LJMP_INSN_SIZE];
-#else
-	u32 insn;
-#endif
 
 	func_node = func->func_node;
 	pc = (unsigned long)func_node->old_func;
 	if (list_is_singular(&func_node->func_stack)) {
 #ifdef CONFIG_ARM_MODULE_PLTS
+		int i;
+
 		for (i = 0; i < LJMP_INSN_SIZE; i++) {
-			insns[i] = func_node->arch_data.old_insns[i];
-			__patch_text(((u32 *)pc) + i, insns[i]);
+			__patch_text(((u32 *)pc) + i, func_node->arch_data.old_insns[i]);
 		}
 #else
-		insn = func_node->arch_data.old_insn;
-		__patch_text((void *)pc, insn);
+		__patch_text((void *)pc, func_node->arch_data.old_insn);
 #endif
 		list_del_rcu(&func->stack_node);
 	} else {
diff --git a/arch/arm64/kernel/livepatch.c b/arch/arm64/kernel/livepatch.c
index 4e4ed4a65244..74405b77e40e 100644
--- a/arch/arm64/kernel/livepatch.c
+++ b/arch/arm64/kernel/livepatch.c
@@ -403,29 +403,19 @@ void arch_klp_unpatch_func(struct klp_func *func)
 	unsigned long pc;
 #ifdef CONFIG_ARM64_MODULE_PLTS
 	int i;
-	u32 insns[LJMP_INSN_SIZE];
-#else
-	u32 insn;
 #endif
 
 	func_node = func->func_node;
 	pc = (unsigned long)func_node->old_func;
 	if (list_is_singular(&func_node->func_stack)) {
-#ifdef CONFIG_ARM64_MODULE_PLTS
-		for (i = 0; i < LJMP_INSN_SIZE; i++)
-			insns[i] = func_node->arch_data.old_insns[i];
-#else
-		insn = func_node->arch_data.old_insn;
-#endif
 		list_del_rcu(&func->stack_node);
-
 #ifdef CONFIG_ARM64_MODULE_PLTS
 		for (i = 0; i < LJMP_INSN_SIZE; i++) {
 			aarch64_insn_patch_text_nosync(((u32 *)pc) + i,
-					insns[i]);
+					func_node->arch_data.old_insns[i]);
 		}
 #else
-		aarch64_insn_patch_text_nosync((void *)pc, insn);
+		aarch64_insn_patch_text_nosync((void *)pc, func_node->arch_data.old_insn);
 #endif
 	} else {
 		list_del_rcu(&func->stack_node);
diff --git a/arch/powerpc/kernel/livepatch_32.c b/arch/powerpc/kernel/livepatch_32.c
index 3b5c9b121c6f..ece36990699e 100644
--- a/arch/powerpc/kernel/livepatch_32.c
+++ b/arch/powerpc/kernel/livepatch_32.c
@@ -445,20 +445,15 @@ void arch_klp_unpatch_func(struct klp_func *func)
 	struct klp_func_node *func_node;
 	struct klp_func *next_func;
 	unsigned long pc;
-	u32 insns[LJMP_INSN_SIZE];
 	int i;
 
 	func_node = func->func_node;
 	pc = (unsigned long)func_node->old_func;
 	if (list_is_singular(&func_node->func_stack)) {
-		for (i = 0; i < LJMP_INSN_SIZE; i++)
-			insns[i] = func_node->arch_data.old_insns[i];
-
 		list_del_rcu(&func->stack_node);
-
 		for (i = 0; i < LJMP_INSN_SIZE; i++)
 			patch_instruction((struct ppc_inst *)(((u32 *)pc) + i),
-					  ppc_inst(insns[i]));
+					  ppc_inst(func_node->arch_data.old_insns[i]));
 	} else {
 		list_del_rcu(&func->stack_node);
 		next_func = list_first_or_null_rcu(&func_node->func_stack,
diff --git a/arch/powerpc/kernel/livepatch_64.c b/arch/powerpc/kernel/livepatch_64.c
index f3cd2ee66efa..9de727a7b455 100644
--- a/arch/powerpc/kernel/livepatch_64.c
+++ b/arch/powerpc/kernel/livepatch_64.c
@@ -477,20 +477,15 @@ void arch_klp_unpatch_func(struct klp_func *func)
 	struct klp_func_node *func_node;
 	struct klp_func *next_func;
 	unsigned long pc;
-	u32 insns[LJMP_INSN_SIZE];
 	int i;
 
 	func_node = func->func_node;
 	pc = (unsigned long)func_node->old_func;
 	if (list_is_singular(&func_node->func_stack)) {
-		for (i = 0; i < LJMP_INSN_SIZE; i++)
-			insns[i] = func_node->arch_data.old_insns[i];
-
 		list_del_rcu(&func->stack_node);
-
 		for (i = 0; i < LJMP_INSN_SIZE; i++)
 			patch_instruction((struct ppc_inst *)((u32 *)pc + i),
-					  ppc_inst(insns[i]));
+					  ppc_inst(func_node->arch_data.old_insns[i]));
 
 		pr_debug("[%s %d] restore insns at 0x%lx\n", __func__, __LINE__, pc);
 		flush_icache_range(pc, pc + LJMP_INSN_SIZE * PPC64_INSN_SIZE);
-- 
2.34.1

