From 199fd7308212399e4b9b022d850f1c6d93269a11 Mon Sep 17 00:00:00 2001
From: Zhang Jian <zhangjian210@huawei.com>
Date: Tue, 10 May 2022 23:04:33 +0800
Subject: [PATCH] mm: export collect_procs()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 199fd7308212399e4b9b022d850f1c6d93269a11
Modified-by-SEL: No


ascend inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I53VVE
CVE: NA

-------------------------------------------------

Collect the processes who have the page mapped via collect_procs().

@page if the page is a part of the hugepages/compound-page, we must
using compound_head() to find it's head page to prevent the kernel panic,
and make the page be locked.

@to_kill the function will return a linked list, when we have used
this list, we must kfree the list.

@force_early if we want to find all process, we must make it be true, if
it's false, the function will only return the process who have PF_MCE_PROCESS
or PF_MCE_EARLY mark.

limits: if force_early is true, sysctl_memory_failure_early_kill is useless.
If it's false, no process have PF_MCE_PROCESS and PF_MCE_EARLY flag, and
the sysctl_memory_failure_early_kill is enabled, function will return all tasks
whether the task have the PF_MCE_PROCESS and PF_MCE_EARLY flag.

Signed-off-by: Zhang Jian <zhangjian210@huawei.com>
Reviewed-by: Weilong Chen <chenweilong@huawei.com>
Reviewed-by: Kefeng Wang<wangkefeng.wang@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Reviewed-by: Weilong Chen <chenweilong@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/mm.h  | 3 ++-
 mm/memory-failure.c | 3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 859d5200c57b..a886f48b6a0e 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -3109,7 +3109,8 @@ extern int sysctl_memory_failure_recovery;
 extern void shake_page(struct page *p, int access);
 extern atomic_long_t num_poisoned_pages __read_mostly;
 extern int soft_offline_page(unsigned long pfn, int flags);
-
+extern void collect_procs(struct page *page, struct list_head *tokill,
+				int force_early);
 
 /*
  * Error handlers for various types of pages.
diff --git a/mm/memory-failure.c b/mm/memory-failure.c
index fb74e61e5aa4..509fe34a0421 100644
--- a/mm/memory-failure.c
+++ b/mm/memory-failure.c
@@ -541,7 +541,7 @@ static void collect_procs_file(struct page *page, struct list_head *to_kill,
 /*
  * Collect the processes who have the corrupted page mapped to kill.
  */
-static void collect_procs(struct page *page, struct list_head *tokill,
+void collect_procs(struct page *page, struct list_head *tokill,
 				int force_early)
 {
 	if (!page->mapping)
@@ -552,6 +552,7 @@ static void collect_procs(struct page *page, struct list_head *tokill,
 	else
 		collect_procs_file(page, tokill, force_early);
 }
+EXPORT_SYMBOL_GPL(collect_procs);
 
 static const char *action_name[] = {
 	[MF_IGNORED] = "Ignored",
-- 
2.34.1

