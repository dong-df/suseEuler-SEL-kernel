From 32174988624144de9e93357306e5a7bcdb44d7b0 Mon Sep 17 00:00:00 2001
From: Zhao Minmin <zhaominmin1@huawei.com>
Date: Wed, 26 Jan 2022 20:00:06 +0800
Subject: [PATCH] ext4: report error to userspace by netlink
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 32174988624144de9e93357306e5a7bcdb44d7b0
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: 34592 https://gitee.com/openeuler/kernel/issues/I4RF6M
CVE: NA

-------------------------------------------------

Implement the ext3/ext4 file system error report.

This patch is used to implement abnormal alarm of ext3/ext4 filesystem.
You can archieve this by setting "FILESYSTEM_MONITOR" or "FILESYSTEM_ALARM"
on in configuration file. With this setting, alarm will be raised when
ext3/ext4 file system expection occurs.

Signed-off-by: Zhao Minmin <zhaominmin1@huawei.com>
Reviewed-by: Yi Zhang <yi.zhang@huawei.com>
Link: http://hulk.huawei.com/pipermail/kernel.openeuler/2016-March/009711.html
Signed-off-by: Wang Hui <john.wanghui@huawei.com>
Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>

[yebin: cherry-pick this patch from openeuler, commit 6636f4434a9c]
conflicts :
fs/ext4/super.c
fs/ext4/ext4.h

Signed-off-by: Ye Bin <yebin10@huawei.com>
Reviewed-by: Zhang Yi <yi.zhang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 fs/ext4/ext4.h               |  9 ++++++
 fs/ext4/super.c              | 55 +++++++++++++++++++++++++++++++++++-
 include/uapi/linux/netlink.h |  1 +
 3 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index bb3adca53d93..85dae812c933 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -45,6 +45,15 @@
 
 #include <linux/compiler.h>
 
+#define NL_EXT4_ERROR_GROUP    1
+#define EXT4_ERROR_MAGIC       0xAE32014U
+struct ext4_err_msg {
+	int magic;
+	char s_id[32];
+	unsigned long s_flags;
+	int ext4_errno;
+};
+
 /*
  * The fourth extended filesystem constants/structures
  */
diff --git a/fs/ext4/super.c b/fs/ext4/super.c
index ee717b73c2b1..856733f756cf 100644
--- a/fs/ext4/super.c
+++ b/fs/ext4/super.c
@@ -55,6 +55,10 @@
 #include "mballoc.h"
 #include "fsmap.h"
 
+#include <uapi/linux/netlink.h>
+#include <net/sock.h>
+#include <net/net_namespace.h>
+
 #define CREATE_TRACE_POINTS
 #include <trace/events/ext4.h>
 
@@ -86,6 +90,8 @@ static void ext4_unregister_li_request(struct super_block *sb);
 static void ext4_clear_request_list(void);
 static struct inode *ext4_get_journal_inode(struct super_block *sb,
 					    unsigned int journal_inum);
+static void ext4_netlink_send_info(struct super_block *sb, int ext4_errno);
+static struct sock *ext4nl;
 
 /*
  * Lock ordering
@@ -616,6 +622,42 @@ static void save_error_info(struct super_block *sb, int error,
 	spin_unlock(&sbi->s_error_lock);
 }
 
+static void ext4_netlink_send_info(struct super_block *sb, int ext4_errno)
+{
+	int size;
+	sk_buff_data_t old_tail;
+	struct sk_buff *skb;
+	struct nlmsghdr *nlh;
+	struct ext4_err_msg *msg;
+
+	if (ext4nl) {
+		size = NLMSG_SPACE(sizeof(struct ext4_err_msg));
+		skb = alloc_skb(size, GFP_ATOMIC);
+		if (!skb) {
+			printk(KERN_ERR "Cannot alloc skb!");
+			return;
+		}
+		old_tail = skb->tail;
+		nlh = nlmsg_put(skb, 0, 0, NLMSG_ERROR, size - sizeof(*nlh), 0);
+		if (!nlh)
+			goto nlmsg_failure;
+		msg = (struct ext4_err_msg *)NLMSG_DATA(nlh);
+		msg->magic = EXT4_ERROR_MAGIC;
+		memcpy(msg->s_id, sb->s_id, sizeof(sb->s_id));
+		msg->s_flags = sb->s_flags;
+		msg->ext4_errno = ext4_errno;
+		nlh->nlmsg_len = skb->tail - old_tail;
+		NETLINK_CB(skb).portid = 0;
+		NETLINK_CB(skb).dst_group = NL_EXT4_ERROR_GROUP;
+		netlink_broadcast(ext4nl, skb, 0, NL_EXT4_ERROR_GROUP,
+		 GFP_ATOMIC);
+		return;
+nlmsg_failure:
+		if (skb)
+			kfree_skb(skb);
+	}
+}
+
 /* Deal with the reporting of failure conditions on a filesystem such as
  * inconsistencies detected or read IO failures.
  *
@@ -677,9 +719,13 @@ static void ext4_handle_error(struct super_block *sb, bool force_ro, int error,
 			sb->s_id);
 	}
 
-	if (sb_rdonly(sb) || continue_fs)
+	if (sb_rdonly(sb))
 		return;
 
+	if (continue_fs)
+		goto out;
+
+
 	ext4_msg(sb, KERN_CRIT, "Remounting filesystem read-only");
 	/*
 	 * Make sure updated value of ->s_mount_flags will be visible before
@@ -687,6 +733,8 @@ static void ext4_handle_error(struct super_block *sb, bool force_ro, int error,
 	 */
 	smp_wmb();
 	sb->s_flags |= SB_RDONLY;
+out:
+	ext4_netlink_send_info(sb, force_ro ? 2 : 1);
 }
 
 static void flush_stashed_error_work(struct work_struct *work)
@@ -6693,6 +6741,7 @@ wait_queue_head_t ext4__ioend_wq[EXT4_WQ_HASH_SZ];
 static int __init ext4_init_fs(void)
 {
 	int i, err;
+	struct netlink_kernel_cfg cfg = {.groups = NL_EXT4_ERROR_GROUP,};
 
 	ratelimit_state_init(&ext4_mount_msg_ratelimit, 30 * HZ, 64);
 	ext4_li_info = NULL;
@@ -6745,6 +6794,9 @@ static int __init ext4_init_fs(void)
 	if (err)
 		goto out;
 
+	ext4nl = netlink_kernel_create(&init_net, NETLINK_FILESYSTEM, &cfg);
+	if (!ext4nl)
+		printk(KERN_ERR "EXT4-fs: Cannot create netlink socket.\n");
 	return 0;
 out:
 	unregister_as_ext2();
@@ -6783,6 +6835,7 @@ static void __exit ext4_exit_fs(void)
 	ext4_exit_post_read_processing();
 	ext4_exit_es();
 	ext4_exit_pending();
+	netlink_kernel_release(ext4nl);
 }
 
 MODULE_AUTHOR("Remy Card, Stephen Tweedie, Andrew Morton, Andreas Dilger, Theodore Ts'o and others");
diff --git a/include/uapi/linux/netlink.h b/include/uapi/linux/netlink.h
index 3d94269bbfa8..a7a91ba005b5 100644
--- a/include/uapi/linux/netlink.h
+++ b/include/uapi/linux/netlink.h
@@ -29,6 +29,7 @@
 #define NETLINK_RDMA		20
 #define NETLINK_CRYPTO		21	/* Crypto layer */
 #define NETLINK_SMC		22	/* SMC monitoring */
+#define NETLINK_FILESYSTEM	28	/* filesystem alarm*/
 
 #define NETLINK_INET_DIAG	NETLINK_SOCK_DIAG
 
-- 
2.26.2

