From 75711e289840e2785bd3e90887aa930238dc75e7 Mon Sep 17 00:00:00 2001
From: Lu Jialin <lujialin4@huawei.com>
Date: Fri, 31 Dec 2021 15:59:31 +0800
Subject: [PATCH] kabi: reserve space for cgroup bpf structures
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 75711e289840e2785bd3e90887aa930238dc75e7


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4GII8?from=project-issue
CVE: NA

--------

We reserve some fields beforehand for cgroup bpf structures prone to change,
therefore, we can hot add/change features of bpf cgroup with this enhancement.

After reserving, normally cache does not matter as the reserved fields
are not accessed at all.

Signed-off-by: Lu Jialin <lujialin4@huawei.com>
Reviewed-by: weiyang wang <wangweiyang2@huawei.com>
Reviewed-by: Xiu Jianfeng <xiujianfeng@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/bpf-cgroup.h | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/include/linux/bpf-cgroup.h b/include/linux/bpf-cgroup.h
index 5120ca319ff4..7014d2ade050 100644
--- a/include/linux/bpf-cgroup.h
+++ b/include/linux/bpf-cgroup.h
@@ -9,6 +9,7 @@
 #include <linux/percpu-refcount.h>
 #include <linux/rbtree.h>
 #include <uapi/linux/bpf.h>
+#include <linux/kabi.h>
 
 struct sock;
 struct sockaddr;
@@ -88,6 +89,23 @@ struct cgroup_bpf {
 
 	/* cgroup_bpf is released using a work queue */
 	struct work_struct release_work;
+
+	KABI_RESERVE(1)
+	KABI_RESERVE(2)
+	KABI_RESERVE(3)
+	KABI_RESERVE(4)
+	KABI_RESERVE(5)
+	KABI_RESERVE(6)
+	KABI_RESERVE(7)
+	KABI_RESERVE(8)
+	KABI_RESERVE(9)
+	KABI_RESERVE(10)
+	KABI_RESERVE(11)
+	KABI_RESERVE(12)
+	KABI_RESERVE(13)
+	KABI_RESERVE(14)
+	KABI_RESERVE(15)
+	KABI_RESERVE(16)
 };
 
 int cgroup_bpf_inherit(struct cgroup *cgrp);
-- 
2.26.2

