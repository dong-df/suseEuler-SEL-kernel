From 95ad9c91ec6d377e0d90945a0d99fcf02ab2c371 Mon Sep 17 00:00:00 2001
From: Mao Minkai <maominkai@wxiat.com>
Date: Tue, 7 Jun 2022 17:41:42 +0800
Subject: [PATCH] sw64: simplify cpumask_of_node
Patch-mainline: NO, OTHERS
References: openEuler-22.03-LTS
Modified-by-SEL: No


Sunway inclusion
category: performance
bugzilla: https://gitee.com/openeuler/kernel/issues/I56OLG

--------------------------------

Simplify cpumask_of_node if CONFIG_DEBUG_PER_CPU_MAPS is not set to
improve performance.

Signed-off-by: Mao Minkai <maominkai@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/include/asm/topology.h |  9 +++++++++
 arch/sw_64/mm/numa.c              | 14 +++++++++++---
 2 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/arch/sw_64/include/asm/topology.h b/arch/sw_64/include/asm/topology.h
index 79af6349fe80..38b3c98ec155 100644
--- a/arch/sw_64/include/asm/topology.h
+++ b/arch/sw_64/include/asm/topology.h
@@ -50,7 +50,16 @@ static inline int cpu_to_node(int cpu)
 static inline void set_cpu_numa_node(int cpu, int node) { }
 #endif /* CONFIG_USE_PERCPU_NUMA_NODE_ID */
 
+#ifndef CONFIG_DEBUG_PER_CPU_MAPS
+extern cpumask_var_t node_to_cpumask_map[MAX_NUMNODES];
+/* Returns a pointer to the cpumask of CPUs on Node 'node'. */
+#define cpumask_of_node(node)	((node) == NUMA_NO_NODE ?	\
+				cpu_all_mask :			\
+				node_to_cpumask_map[node])
+#else
 extern const struct cpumask *cpumask_of_node(int node);
+#endif /* CONFIG_DEBUG_PER_CPU_MAPS */
+
 extern void numa_add_cpu(unsigned int cpu);
 extern void numa_remove_cpu(unsigned int cpu);
 extern void numa_store_cpu_info(unsigned int cpu);
diff --git a/arch/sw_64/mm/numa.c b/arch/sw_64/mm/numa.c
index 97288d91d7bb..940c12fcbb8d 100644
--- a/arch/sw_64/mm/numa.c
+++ b/arch/sw_64/mm/numa.c
@@ -417,24 +417,32 @@ void numa_store_cpu_info(unsigned int cpu)
 	set_cpu_numa_node(cpu, cpu_to_node_map[cpu]);
 }
 
+#ifdef CONFIG_DEBUG_PER_CPU_MAPS
 /*
  * Returns a pointer to the bitmask of CPUs on Node 'node'.
  */
 const struct cpumask *cpumask_of_node(int node)
 {
 
-	if (node == NUMA_NO_NODE)
+	if (node == NUMA_NO_NODE) {
+		pr_warn("%s: NUMA_NO_NODE\n", __func__);
 		return cpu_all_mask;
+	}
 
-	if (WARN_ON(node < 0 || node >= nr_node_ids))
+	if (WARN_ON(node < 0 || node >= nr_node_ids)) {
+		pr_warn("%s: invalid node %d\n", __func__, node);
 		return cpu_none_mask;
+	}
 
-	if (WARN_ON(node_to_cpumask_map[node] == NULL))
+	if (WARN_ON(node_to_cpumask_map[node] == NULL)) {
+		pr_warn("%s: uninitialized node %d\n", __func__, node);
 		return cpu_online_mask;
+	}
 
 	return node_to_cpumask_map[node];
 }
 EXPORT_SYMBOL(cpumask_of_node);
+#endif
 
 static void numa_update_cpu(unsigned int cpu, bool remove)
 {
-- 
2.34.1

