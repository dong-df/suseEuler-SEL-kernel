From d23c9a9ba6069cdd90b6bef145820c0511700a54 Mon Sep 17 00:00:00 2001
From: Chen Zhou <chenzhou10@huawei.com>
Date: Mon, 17 May 2021 09:56:47 +0800
Subject: [PATCH] kdump: replace memblock_phys_alloc_range() with
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: d23c9a9ba6069cdd90b6bef145820c0511700a54

 memblock_find_in_range() + memblock_reserve()

hulk inclusion
category: bugfix
bugzilla: 47954
CVE: NA

---------------------------------------

When kdump and kmemleak are enabled at the same time, the system may
oops.
Replace memblock_phys_alloc_range() with memblock_find_in_range() +
memblock_reserve() to fix this.

Signed-off-by: Chen Zhou <chenzhou10@huawei.com>
Reviewed-by: Jing Xiangfeng <jingxiangfeng@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 kernel/crash_core.c | 32 ++++++++++++++++++++++----------
 1 file changed, 22 insertions(+), 10 deletions(-)

diff --git a/kernel/crash_core.c b/kernel/crash_core.c
index bfed474b8da6..ddb6e2179eb3 100644
--- a/kernel/crash_core.c
+++ b/kernel/crash_core.c
@@ -349,14 +349,20 @@ static int __init reserve_crashkernel_low(void)
 			return 0;
 	}
 
-	low_base = memblock_phys_alloc_range(low_size, CRASH_ALIGN, CRASH_ALIGN,
-			CRASH_ADDR_LOW_MAX);
+	low_base = memblock_find_in_range(CRASH_ALIGN, CRASH_ADDR_LOW_MAX,
+			low_size, CRASH_ALIGN);
 	if (!low_base) {
 		pr_err("Cannot reserve %ldMB crashkernel low memory, please try smaller size.\n",
 		       (unsigned long)(low_size >> 20));
 		return -ENOMEM;
 	}
 
+	ret = memblock_reserve(low_base, low_size);
+	if (ret) {
+		pr_err("%s: Error reserving crashkernel low memblock.\n", __func__);
+		return ret;
+	}
+
 	pr_info("Reserving %ldMB of low memory at %ldMB for crashkernel (low RAM limit: %ldMB)\n",
 		(unsigned long)(low_size >> 20),
 		(unsigned long)(low_base >> 20),
@@ -406,13 +412,13 @@ void __init reserve_crashkernel(void)
 		 * unless "crashkernel=size[KMG],high" is specified.
 		 */
 		if (!high)
-			crash_base = memblock_phys_alloc_range(crash_size,
-						CRASH_ALIGN, CRASH_ALIGN,
-						CRASH_ADDR_LOW_MAX);
+			crash_base = memblock_find_in_range(CRASH_ALIGN,
+					CRASH_ADDR_LOW_MAX, crash_size,
+					CRASH_ALIGN);
 		if (!crash_base)
-			crash_base = memblock_phys_alloc_range(crash_size,
-						CRASH_ALIGN, CRASH_ALIGN,
-						CRASH_ADDR_HIGH_MAX);
+			crash_base = memblock_find_in_range(CRASH_ALIGN,
+					CRASH_ADDR_HIGH_MAX, crash_size,
+					CRASH_ALIGN);
 		if (!crash_base) {
 			pr_info("crashkernel reservation failed - No suitable area found.\n");
 			return;
@@ -427,13 +433,19 @@ void __init reserve_crashkernel(void)
 			return;
 		}
 
-		start = memblock_phys_alloc_range(crash_size, CRASH_ALIGN, crash_base,
-						  crash_base + crash_size);
+		start = memblock_find_in_range(crash_base,
+				crash_base + crash_size, crash_size,
+				CRASH_ALIGN);
 		if (start != crash_base) {
 			pr_info("crashkernel reservation failed - memory is in use.\n");
 			return;
 		}
 	}
+	ret = memblock_reserve(crash_base, crash_size);
+	if (ret) {
+		pr_err("%s: Error reserving crashkernel memblock.\n", __func__);
+		return;
+	}
 
 	if (crash_base >= CRASH_ADDR_LOW_MAX && reserve_crashkernel_low()) {
 		memblock_free(crash_base, crash_size);
-- 
2.26.2

