From 37459b7412bbafdc490128eb04ed6742dc1356e3 Mon Sep 17 00:00:00 2001
From: Chen Wandun <chenwandun@huawei.com>
Date: Tue, 16 Aug 2022 21:10:24 +0800
Subject: [PATCH] Revert "mm/page_cache_limit: reconfiguration about page cache
 limit when memory plug/unplug"
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 37459b7412bbafdc490128eb04ed6742dc1356e3
Modified-by-SEL: Yes, refreshed due to different context


hulk inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I56I4P
CVE: NA
backport: openEuler-22.03-LTS

--------------------------------

This reverts commit 955d63aec936df0ffbb53118ab28b4c208ac8abf.

Signed-off-by: Chen Wandun <chenwandun@huawei.com>
Reviewed-by: Tong Tiangen <tongtiangen@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/page_cache_limit.h |    4 ---
 mm/memory_hotplug.c              |    3 --
 mm/page_cache_limit.c            |   45 +++++++--------------------------------
 3 files changed, 9 insertions(+), 43 deletions(-)

--- a/include/linux/page_cache_limit.h
+++ b/include/linux/page_cache_limit.h
@@ -17,11 +17,7 @@ int proc_page_cache_limit(struct ctl_tab
 		void __user *buffer, size_t *lenp, loff_t *ppos);
 unsigned long __shrink_node_page_cache(int nid, gfp_t mask,
 		unsigned long nr_to_reclaim, enum page_cache_reclaim_flag flag);
-void kpagecache_limitd_stop(int nid);
-int kpagecache_limitd_run(int nid);
 #else
-static inline void kpagecache_limitd_stop(int nid) {}
-static inline int kpagecache_limitd_run(int nid) { return 0; }
 #endif
 
 #endif
--- a/mm/memory_hotplug.c
+++ b/mm/memory_hotplug.c
@@ -39,7 +39,6 @@
 #include <linux/module.h>
 
 #include <asm/tlbflush.h>
-#include <linux/page_cache_limit.h>
 
 #include "internal.h"
 #include "shuffle.h"
@@ -860,7 +859,6 @@ int __ref online_pages(unsigned long pfn
 
 	kswapd_run(nid);
 	kcompactd_run(nid);
-	kpagecache_limitd_run(nid);
 
 	writeback_set_ratelimit();
 
@@ -1632,7 +1630,6 @@ int __ref offline_pages(unsigned long st
 	if (arg.status_change_nid >= 0) {
 		kswapd_stop(node);
 		kcompactd_stop(node);
-		kpagecache_limitd_stop(node);
 	}
 
 	writeback_set_ratelimit();
--- a/mm/page_cache_limit.c
+++ b/mm/page_cache_limit.c
@@ -31,27 +31,18 @@ static unsigned long get_node_total_page
 	return managed_pages;
 }
 
-static void setup_node_pagecache_limit(int nid)
-{
-	unsigned long node_total_pages;
-
-	node_total_pages = get_node_total_pages(nid);
-	node_pagecache_limit_pages[nid] = node_total_pages * pagecache_limit_ratio / 100;
-}
-
-#define ALL_NODE (-1)
-static void setup_pagecache_limit(int nid)
+static void setup_pagecache_limit(void)
 {
 	int i;
+	unsigned long node_total_pages;
 
 	pagecache_limit_pages = pagecache_limit_ratio * totalram_pages() / 100;
 
-	if (nid != ALL_NODE)
-		setup_node_pagecache_limit(nid);
-
-	else
-		for (i = 0; i < MAX_NUMNODES; i++)
-			setup_node_pagecache_limit(i);
+	for (i = 0; i < MAX_NUMNODES; i++) {
+		node_total_pages = get_node_total_pages(i);
+		node_pagecache_limit_pages[i] = node_total_pages *
+						pagecache_limit_ratio / 100;
+	}
 }
 
 int proc_page_cache_limit(struct ctl_table *table, int write,
@@ -62,7 +53,7 @@ int proc_page_cache_limit(struct ctl_tab
 	ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos);
 
 	if (write && !ret)
-		setup_pagecache_limit(ALL_NODE);
+		setup_pagecache_limit();
 
 	return ret;
 }
@@ -81,8 +72,6 @@ void kpagecache_limitd_stop(int nid)
 		kvfree(pagecache_limitd_wait_queue[nid]);
 		pagecache_limitd_wait_queue[nid] = NULL;
 	}
-
-	setup_pagecache_limit(nid);
 }
 
 static void wakeup_kpagecache_limitd(int nid)
@@ -218,7 +207,7 @@ static int pagecache_limitd(void *arg)
 	return 0;
 }
 
-static int __kpagecache_limitd_run(int nid)
+int kpagecache_limitd_run(int nid)
 {
 	int ret = 0;
 	wait_queue_head_t *queue_head = NULL;
@@ -247,22 +236,6 @@ static int __kpagecache_limitd_run(int n
 	return ret;
 }
 
-int kpagecache_limitd_run(int nid)
-{
-	int ret;
-
-	if (nid < 0 || nid >= MAX_NUMNODES)
-		return -EINVAL;
-
-	ret = __kpagecache_limitd_run(nid);
-	if (ret)
-		return ret;
-
-	setup_pagecache_limit(nid);
-
-	return 0;
-}
-
 static int __init kpagecache_limitd_init(void)
 {
 	int nid;
