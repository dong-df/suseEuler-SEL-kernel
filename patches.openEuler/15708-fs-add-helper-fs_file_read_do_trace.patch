From b4f51e426f788cd534e7897c39caa45267d94a0e Mon Sep 17 00:00:00 2001
From: Hou Tao <houtao1@huawei.com>
Date: Mon, 23 May 2022 21:18:14 +0800
Subject: [PATCH] fs: add helper fs_file_read_do_trace()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: b4f51e426f788cd534e7897c39caa45267d94a0e
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I53R0H
CVE: NA
backport: openEuler-22.03-LTS

---------------------------

fs_file_read_do_trace() uses writable-tracepoint to update f_mode
for file read procedure. Also export it to make it being usable
for filesystem kernel module.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Acked-by: fang wei <fangwei1@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
Reviewed-by: Zhang Yi <yi.zhang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 fs/read_write.c    | 33 +++++++++++++++++++++++++++++++++
 include/linux/fs.h | 13 +++++++++++++
 2 files changed, 46 insertions(+)

diff --git a/fs/read_write.c b/fs/read_write.c
index 433ca8ab7c91..d175b5e8d3d3 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -1682,5 +1682,38 @@ int generic_file_rw_checks(struct file *file_in, struct file *file_out)
 	return 0;
 }
 
+#ifdef CONFIG_TRACEPOINTS
+static void fs_file_read_ctx_init(struct fs_file_read_ctx *ctx,
+				  struct file *filp, loff_t pos)
+{
+	memset(ctx, 0, sizeof(*ctx));
+	ctx->name = file_dentry(filp)->d_name.name;
+	ctx->f_ctl_mode = filp->f_ctl_mode;
+	ctx->key = (unsigned long)filp;
+	ctx->i_size = file_inode(filp)->i_size;
+	ctx->prev_index = filp->f_ra.prev_pos >> PAGE_SHIFT;
+	ctx->index = pos >> PAGE_SHIFT;
+}
+
+#define FS_FILE_READ_VERSION 1
+#define FS_FILE_READ_MODE_MASK (FMODE_CTL_RANDOM | FMODE_CTL_WILLNEED)
+
+void fs_file_read_update_args_by_trace(struct kiocb *iocb)
+{
+	struct file *filp = iocb->ki_filp;
+	struct fs_file_read_ctx ctx;
+
+	fs_file_read_ctx_init(&ctx, filp, iocb->ki_pos);
+	trace_fs_file_read(&ctx, FS_FILE_READ_VERSION);
+
+	if (!ctx.set_f_ctl_mode && !ctx.clr_f_ctl_mode)
+		return;
+
+	filp->f_ctl_mode |= ctx.set_f_ctl_mode & FS_FILE_READ_MODE_MASK;
+	filp->f_ctl_mode &= ~(ctx.clr_f_ctl_mode & FS_FILE_READ_MODE_MASK);
+}
+EXPORT_SYMBOL_GPL(fs_file_read_update_args_by_trace);
+#endif
+
 EXPORT_TRACEPOINT_SYMBOL_GPL(fs_file_read);
 EXPORT_TRACEPOINT_SYMBOL_GPL(fs_file_release);
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 1ed02fc8bdd0..44ee66086b94 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -41,6 +41,7 @@
 #include <linux/build_bug.h>
 #include <linux/stddef.h>
 #include <linux/mount.h>
+#include <linux/tracepoint-defs.h>
 
 #include <asm/byteorder.h>
 #include <uapi/linux/fs.h>
@@ -3579,4 +3580,16 @@ struct fs_file_read_ctx {
 	long long index;
 };
 
+#ifdef CONFIG_TRACEPOINTS
+DECLARE_TRACEPOINT(fs_file_read);
+extern void fs_file_read_update_args_by_trace(struct kiocb *iocb);
+#else
+static inline void fs_file_read_update_args_by_trace(struct kiocb *iocb) {}
+#endif
+
+static inline void fs_file_read_do_trace(struct kiocb *iocb)
+{
+	if (tracepoint_enabled(fs_file_read))
+		fs_file_read_update_args_by_trace(iocb);
+}
 #endif /* _LINUX_FS_H */
-- 
2.34.1

