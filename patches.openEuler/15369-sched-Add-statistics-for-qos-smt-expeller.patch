From 27b101248200f294952daade954293898b1cd0c6 Mon Sep 17 00:00:00 2001
From: Guan Jing <guanjing6@huawei.com>
Date: Tue, 10 May 2022 23:04:57 +0800
Subject: [PATCH] sched: Add statistics for qos smt expeller
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 27b101248200f294952daade954293898b1cd0c6
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I52611
CVE: NA

--------------------------------

We have added two statistics for qos smt expeller:
a) nr_qos_smt_send_ipi:the times of ipi which online task expel offline tasks;
b) nr_qos_smt_expelled:the statistics that offline task will not be picked times.

Signed-off-by: Guan Jing <guanjing6@huawei.com>
Reviewed-by: Chen Hui <judy.chenhui@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/sched.h | 6 +++++-
 kernel/sched/debug.c  | 4 ++++
 kernel/sched/fair.c   | 2 ++
 3 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 06215f01f68f..7928b8d9c7da 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -461,8 +461,13 @@ struct sched_statistics {
 	u64				nr_wakeups_passive;
 	u64				nr_wakeups_idle;
 
+#if defined(CONFIG_QOS_SCHED_SMT_EXPELLER) && !defined(__GENKSYMS__)
+	u64				nr_qos_smt_send_ipi;
+	u64				nr_qos_smt_expelled;
+#else
 	KABI_RESERVE(1)
 	KABI_RESERVE(2)
+#endif
 	KABI_RESERVE(3)
 	KABI_RESERVE(4)
 #endif
@@ -2172,5 +2177,4 @@ static inline int sched_qos_cpu_overload(void)
 	return 0;
 }
 #endif
-
 #endif
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index 70a578272436..12fbaf1302ac 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -982,6 +982,10 @@ void proc_sched_show_task(struct task_struct *p, struct pid_namespace *ns,
 		P_SCHEDSTAT(se.statistics.nr_wakeups_affine_attempts);
 		P_SCHEDSTAT(se.statistics.nr_wakeups_passive);
 		P_SCHEDSTAT(se.statistics.nr_wakeups_idle);
+#ifdef CONFIG_QOS_SCHED_SMT_EXPELLER
+		P_SCHEDSTAT(se.statistics.nr_qos_smt_send_ipi);
+		P_SCHEDSTAT(se.statistics.nr_qos_smt_expelled);
+#endif
 
 		avg_atom = p->se.sum_exec_runtime;
 		if (nr_switches)
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 28452107e96b..88f95910eab9 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -7455,6 +7455,7 @@ static void qos_smt_send_ipi(int this_cpu)
 		    rq->cfs.h_nr_running == 0)
 			continue;
 
+		schedstat_inc(current->se.statistics.nr_qos_smt_send_ipi);
 		smp_send_reschedule(cpu);
 	}
 }
@@ -7526,6 +7527,7 @@ pick_next_task_fair(struct rq *rq, struct task_struct *prev, struct rq_flags *rf
 #ifdef CONFIG_QOS_SCHED_SMT_EXPELLER
 	if (qos_smt_expelled(this_cpu)) {
 		__this_cpu_write(qos_smt_status, QOS_LEVEL_OFFLINE);
+		schedstat_inc(rq->curr->se.statistics.nr_qos_smt_expelled);
 		return NULL;
 	}
 #endif
-- 
2.34.1

