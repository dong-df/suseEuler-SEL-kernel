From f153e320d3a74b88f2eac745aeac65d2d3e1c3e7 Mon Sep 17 00:00:00 2001
From: Xingjun Liu <xingjun.lxj@alibaba-inc.com>
Date: Sat, 26 Jun 2021 02:55:08 +0000
Subject: [PATCH] alinux: random: speed up the initialization of module
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: f153e320d3a74b88f2eac745aeac65d2d3e1c3e7


maillist inclusion
category: performance
bugzilla: 109294
CVE: NA

Reference: https://gitee.com/openeuler/kernel/commit/ae624897ce3846524a3b0d3e525d8f8a8f80f326

---------------------------

alinux: random: speed up the initialization of module

During the module initialization phase, entropy will be added
to entropy pool for every interrupt, the change should speed up
initialization of the random module.

Before optimization:
[   22.180236] random: crng init done

After optimization:
[    1.474832] random: crng init done

Signed-off-by: Xingjun Liu <xingjun.lxj@alibaba-inc.com>
Reviewed-by: Liu Jiang <gerry@linux.alibaba.com>
Reviewed-by: Caspar Zhang <caspar@linux.alibaba.com>
Reviewed-by: Jia Zhang <zhang.jia@linux.alibaba.com>
Reviewed-by: Yang Shi <yang.shi@linux.alibaba.com>
Reviewed-by: Liu Bo <bo.liu@linux.alibaba.com>
Signed-off-by: Chen Jialong <chenjialong@huawei.com>
Reviewed-by: Xiu Jianfeng <xiujianfeng@huawei.com>
Reviewed-by: Ziyuan Hu <huziyuan@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Chen Jun <chenjun102@huawei.com>
Reviewed-by: Xiu Jianfeng <xiujianfeng@huawei.com>
Signed-off-by: Chen Jun <chenjun102@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/char/random.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/drivers/char/random.c b/drivers/char/random.c
index 340ad21491e2..abe3aa012ed2 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -1289,7 +1289,8 @@ void add_interrupt_randomness(int irq, int irq_flags)
 	}
 
 	if ((fast_pool->count < 64) &&
-	    !time_after(now, fast_pool->last + HZ))
+	    !time_after(now, fast_pool->last + HZ) &&
+	    crng_ready())
 		return;
 
 	r = &input_pool;
-- 
2.26.2

