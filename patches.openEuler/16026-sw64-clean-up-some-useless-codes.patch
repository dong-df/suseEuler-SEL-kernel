From d97a6569ed9d212f0ca9e057a23ee8c6b880dd3a Mon Sep 17 00:00:00 2001
From: Zhou Xuemei <zhouxuemei@wxiat.com>
Date: Tue, 7 Jun 2022 17:41:46 +0800
Subject: [PATCH] sw64: clean up some useless codes
Patch-mainline: NO, OTHERS
References: openEuler-22.03-LTS
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I56OLG

--------------------------------

Signed-off-by: Zhou Xuemei <zhouxuemei@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/include/asm/pci.h | 16 +++---------
 arch/sw_64/kernel/msi.c      | 18 -------------
 arch/sw_64/kernel/pci_impl.h | 49 ------------------------------------
 3 files changed, 3 insertions(+), 80 deletions(-)

diff --git a/arch/sw_64/include/asm/pci.h b/arch/sw_64/include/asm/pci.h
index ba522c288fd6..c917009c9530 100644
--- a/arch/sw_64/include/asm/pci.h
+++ b/arch/sw_64/include/asm/pci.h
@@ -15,7 +15,6 @@
 struct pci_dev;
 struct pci_bus;
 struct resource;
-struct pci_iommu_arena;
 struct sunway_iommu;
 struct page;
 
@@ -45,10 +44,6 @@ struct pci_controller {
 	/* For compatibility with current (as of July 2003) pciutils
 	   and XFree86. Eventually will be removed. */
 	unsigned int need_domain_info;
-
-	struct pci_iommu_arena *sg_pci;
-	struct pci_iommu_arena *sg_isa;
-
 	bool iommu_enable;
 	struct sunway_iommu *pci_iommu;
 	int first_busno;
@@ -66,22 +61,17 @@ struct pci_controller {
 #define PCIBIOS_MIN_IO		0
 #define PCIBIOS_MIN_MEM		0
 
-extern void pcibios_set_master(struct pci_dev *dev);
+/* generic pci stuff */
+#include <asm-generic/pci.h>
+
 extern void __init sw64_init_pci(void);
 extern void __init sw64_device_interrupt(unsigned long vector);
 extern void __init sw64_init_irq(void);
 extern void __init sw64_init_arch(void);
-extern unsigned char sw64_swizzle(struct pci_dev *dev, u8 *pinp);
 extern struct pci_ops sw64_pci_ops;
 extern int sw64_map_irq(const struct pci_dev *dev, u8 slot, u8 pin);
 extern struct pci_controller *hose_head;
 
-/* TODO: integrate with include/asm-generic/pci.h ? */
-static inline int pci_get_legacy_ide_irq(struct pci_dev *dev, int channel)
-{
-	return channel ? 15 : 14;
-}
-
 #ifdef CONFIG_SUNWAY_IOMMU
 extern struct syscore_ops iommu_cpu_syscore_ops;
 #endif
diff --git a/arch/sw_64/kernel/msi.c b/arch/sw_64/kernel/msi.c
index 644e4010af8a..d942a688a324 100644
--- a/arch/sw_64/kernel/msi.c
+++ b/arch/sw_64/kernel/msi.c
@@ -22,26 +22,8 @@ void sw64_irq_noop(struct irq_data *d)
 {
 }
 
-void destroy_irq(unsigned int irq)
-{
-#if 0
-	int pos;
-
-	irq_init_desc(irq);
-
-	if (irq < RC1_FIRST_MSI_VECTOR) {
-		pos = irq - RC0_FIRST_MSI_VECTOR;
-		clear_bit(pos, msi0_irq_in_use);
-	} else {
-		pos = irq - RC1_FIRST_MSI_VECTOR;
-		clear_bit(pos, msi1_irq_in_use);
-	}
-#endif
-}
-
 void arch_teardown_msi_irq(unsigned int irq)
 {
-	destroy_irq(irq);
 }
 
 static int __init msi_init(void)
diff --git a/arch/sw_64/kernel/pci_impl.h b/arch/sw_64/kernel/pci_impl.h
index 0cb6d1b1d1e3..8e541f28f4ce 100644
--- a/arch/sw_64/kernel/pci_impl.h
+++ b/arch/sw_64/kernel/pci_impl.h
@@ -8,60 +8,11 @@
 
 struct pci_dev;
 struct pci_controller;
-struct pci_iommu_arena;
-
-/*
- * We can't just blindly use 64K for machines with EISA busses; they
- * may also have PCI-PCI bridges present, and then we'd configure the
- * bridge incorrectly.
- *
- * Also, we start at 0x8000 or 0x9000, in hopes to get all devices'
- * IO space areas allocated *before* 0xC000; this is because certain
- * BIOSes (Millennium for one) use PCI Config space "mechanism #2"
- * accesses to probe the bus. If a device's registers appear at 0xC000,
- * it may see an INx/OUTx at that address during BIOS emulation of the
- * VGA BIOS, and some cards, notably Adaptec 2940UW, take mortal offense.
- */
-
-#define EISA_DEFAULT_IO_BASE	0x9000	/* start above 8th slot */
-#define DEFAULT_IO_BASE		0x0     /* start at 8th slot */
-
-/*
- * We try to make the DEFAULT_MEM_BASE addresses *always* have more than
- * a single bit set. This is so that devices like the broken Myrinet card
- * will always have a PCI memory address that will never match a IDSEL
- * address in PCI Config space, which can cause problems with early rev cards.
- */
-
-#define DEFAULT_MEM_BASE 0
-
-/*
- * A PCI IOMMU allocation arena.  There are typically two of these
- * regions per bus.
- * ??? The 8400 has a 32-byte pte entry, and the entire table apparently
- * lives directly on the host bridge (no tlb?).  We don't support this
- * machine, but if we ever did, we'd need to parameterize all this quite
- * a bit further.  Probably with per-bus operation tables.
- */
-
-struct pci_iommu_arena {
-	spinlock_t lock;
-	struct pci_controller *hose;
-#define IOMMU_INVALID_PTE 0x2 /* 32:63 bits MBZ */
-#define IOMMU_RESERVED_PTE 0xface
-	unsigned long *ptes;
-	dma_addr_t dma_base;
-	unsigned int size;
-	unsigned int next_entry;
-	unsigned int align_entry;
-};
-
 
 /* The hose list.  */
 extern struct pci_controller *hose_head, **hose_tail;
 
 extern void common_init_pci(void);
-#define common_swizzle pci_common_swizzle
 extern struct pci_controller *alloc_pci_controller(void);
 extern struct resource *alloc_resource(void);
 
-- 
2.34.1

