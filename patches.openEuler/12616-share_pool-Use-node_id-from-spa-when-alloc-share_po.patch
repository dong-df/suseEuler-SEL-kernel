From 07c6aec333701acfa81dd944444bf7949aa7513a Mon Sep 17 00:00:00 2001
From: Wang Wensheng <wangwensheng4@huawei.com>
Date: Thu, 30 Dec 2021 16:27:14 +0800
Subject: [PATCH] share_pool: Use node_id from spa when alloc share_pool memory
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 07c6aec333701acfa81dd944444bf7949aa7513a
Modified-by-SEL: Yes, refreshed due to context change


ascend inclusion
category: Feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4NDAW
CVE: NA

-------------------

We store the preferred node_id in sp_area in sp_alloc() and use it for
memory alloc in shmem_fault.

Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
Signed-off-by: Peng Wu <wupeng58@huawei.com>
Reviewed-by: Kefeng Wang<wangkefeng.wang@huawei.com>
Reviewed-by: Weilong Chen <chenweilong@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/share_pool.h |  1 +
 mm/share_pool.c            | 20 +++++++++++++++++++-
 mm/shmem.c                 |  5 +++--
 3 files changed, 23 insertions(+), 3 deletions(-)

--- a/include/linux/share_pool.h
+++ b/include/linux/share_pool.h
@@ -262,6 +262,7 @@ extern int sp_group_exit(struct mm_struc
 extern void sp_group_post_exit(struct mm_struct *mm);
 extern bool sp_check_addr(unsigned long addr);
 extern bool sp_check_mmap_addr(unsigned long addr, unsigned long flags);
+extern int sp_node_id(struct vm_area_struct *vma);
 
 static inline bool sp_is_enabled(void)
 {
--- a/mm/share_pool.c
+++ b/mm/share_pool.c
@@ -1971,7 +1971,6 @@ static int sp_check_caller_permission(st
 	return ret;
 }
 
-
 #define FREE_CONT	1
 #define FREE_END	2
 
@@ -3616,6 +3615,25 @@ bool mg_is_sharepool_addr(unsigned long
 }
 EXPORT_SYMBOL_GPL(mg_is_sharepool_addr);
 
+int sp_node_id(struct vm_area_struct *vma)
+{
+	struct sp_area *spa;
+	int node_id = numa_node_id();
+
+	if (!sp_is_enabled())
+		return node_id;
+
+	if (vma) {
+		spa = __find_sp_area(vma->vm_start);
+		if (spa) {
+			node_id = spa->node_id;
+			__sp_area_drop(spa);
+		}
+	}
+
+	return node_id;
+}
+
 static int __init mdc_default_group(char *s)
 {
 	enable_mdc_default_group = 1;
--- a/mm/shmem.c
+++ b/mm/shmem.c
@@ -80,6 +80,7 @@ static struct vfsmount *shm_mnt;
 #include <linux/userfaultfd_k.h>
 #include <linux/rmap.h>
 #include <linux/uuid.h>
+#include <linux/share_pool.h>
 
 #include <linux/uaccess.h>
 
@@ -1917,11 +1918,11 @@ repeat:
 
 	huge_gfp = vma_thp_gfp_mask(vma);
 	huge_gfp = limit_gfp_mask(huge_gfp, gfp);
-	page = shmem_alloc_and_acct_page(huge_gfp, inode, index, true, numa_node_id());
+	page = shmem_alloc_and_acct_page(huge_gfp, inode, index, true, sp_node_id(vma));
 	if (IS_ERR(page)) {
 alloc_nohuge:
 		page = shmem_alloc_and_acct_page(gfp, inode,
-						 index, false, numa_node_id());
+						 index, false, sp_node_id(vma));
 	}
 	if (IS_ERR(page)) {
 		int retry = 5;
