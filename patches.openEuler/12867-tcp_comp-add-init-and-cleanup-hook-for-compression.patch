From cc36784b15f82f87559f9e43a0f7951c7b188ac9 Mon Sep 17 00:00:00 2001
From: Wang Yufen <wangyufen@huawei.com>
Date: Fri, 7 Jan 2022 23:07:16 +0800
Subject: [PATCH] tcp_comp: add init and cleanup hook for compression
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: cc36784b15f82f87559f9e43a0f7951c7b188ac9


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4PNEK
CVE: NA

-------------------------------------------------

When establishing a tcp connection or closing it, the
tcp compression needs to be initialized or cleaned
up at the same time.

Add dummy init and cleanup hook for tcp compression.
It will be implemented later.

Signed-off-by: Wei Yongjun <weiyongjun1@huawei.com>
Signed-off-by: Wang Yufen <wangyufen@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Lu Wei <luwei32@huawei.com>
Reviewed-by: Wei Yongjun <weiyongjun1@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/net/tcp.h    | 9 +++++++++
 net/ipv4/tcp_comp.c  | 8 ++++++++
 net/ipv4/tcp_input.c | 1 +
 net/ipv4/tcp_ipv4.c  | 2 ++
 4 files changed, 20 insertions(+)

diff --git a/include/net/tcp.h b/include/net/tcp.h
index 130e7fe4537c..edd7bfa87871 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -2383,11 +2383,20 @@ static inline u64 tcp_transmit_time(const struct sock *sk)
 #if IS_ENABLED(CONFIG_TCP_COMP)
 extern struct static_key_false tcp_have_comp;
 bool tcp_syn_comp_enabled(const struct tcp_sock *tp);
+void tcp_init_compression(struct sock *sk);
+void tcp_cleanup_compression(struct sock *sk);
 #else
 static inline bool tcp_syn_comp_enabled(const struct tcp_sock *tp)
 {
 	return false;
 }
+static inline void tcp_init_compression(struct sock *sk)
+{
+}
+
+static inline void tcp_cleanup_compression(struct sock *sk)
+{
+}
 #endif
 
 #endif	/* _TCP_H */
diff --git a/net/ipv4/tcp_comp.c b/net/ipv4/tcp_comp.c
index e2bf4fbb4c3f..067d48b72429 100644
--- a/net/ipv4/tcp_comp.c
+++ b/net/ipv4/tcp_comp.c
@@ -11,3 +11,11 @@ bool tcp_syn_comp_enabled(const struct tcp_sock *tp)
 {
 	return true;
 }
+
+void tcp_init_compression(struct sock *sk)
+{
+}
+
+void tcp_cleanup_compression(struct sock *sk)
+{
+}
diff --git a/net/ipv4/tcp_input.c b/net/ipv4/tcp_input.c
index e0c05a9e1274..711bf63dc026 100644
--- a/net/ipv4/tcp_input.c
+++ b/net/ipv4/tcp_input.c
@@ -5937,6 +5937,7 @@ void tcp_init_transfer(struct sock *sk, int bpf_op, struct sk_buff *skb)
 	/* Initialize congestion control unless BPF initialized it already: */
 	if (!icsk->icsk_ca_initialized)
 		tcp_init_congestion_control(sk);
+	tcp_init_compression(sk);
 	tcp_init_buffer_space(sk);
 }
 
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 017cd666387f..ebfeeeadd47c 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -2218,6 +2218,8 @@ void tcp_v4_destroy_sock(struct sock *sk)
 
 	tcp_cleanup_congestion_control(sk);
 
+	tcp_cleanup_compression(sk);
+
 	tcp_cleanup_ulp(sk);
 
 	/* Cleanup up the write buffer. */
-- 
2.26.2

