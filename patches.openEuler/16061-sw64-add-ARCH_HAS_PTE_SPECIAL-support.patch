From 8437a2d1990a18897505f5725adfd0d1abdd62e2 Mon Sep 17 00:00:00 2001
From: Zhou Xuemei <zhouxuemei@wxiat.com>
Date: Tue, 7 Jun 2022 17:42:21 +0800
Subject: [PATCH] sw64: add ARCH_HAS_PTE_SPECIAL support
Patch-mainline: NO, OTHERS
References: openEuler-22.03-LTS
Modified-by-SEL: No


Sunway inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I56U83

--------------------------------

Add ARCH_HAS_PTE_SPECIAL support to mark some special page table
entries.

Signed-off-by: Zhou Xuemei <zhouxuemei@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/Kconfig               |  1 +
 arch/sw_64/include/asm/pgtable.h | 14 +++++++++++++-
 2 files changed, 14 insertions(+), 1 deletion(-)

diff --git a/arch/sw_64/Kconfig b/arch/sw_64/Kconfig
index a37e92c1c8e4..cf1d4b97835b 100644
--- a/arch/sw_64/Kconfig
+++ b/arch/sw_64/Kconfig
@@ -104,6 +104,7 @@ config SW64
 	select PCI_MSI_ARCH_FALLBACKS
 	select DMA_OPS if PCI
 	select HAVE_REGS_AND_STACK_ACCESS_API
+	select ARCH_HAS_PTE_SPECIAL
 
 config LOCKDEP_SUPPORT
 	def_bool y
diff --git a/arch/sw_64/include/asm/pgtable.h b/arch/sw_64/include/asm/pgtable.h
index 4bcf0df1749b..590f15508e28 100644
--- a/arch/sw_64/include/asm/pgtable.h
+++ b/arch/sw_64/include/asm/pgtable.h
@@ -89,6 +89,7 @@ static inline void set_pmd_at(struct mm_struct *mm, unsigned long addr,
 #define _PAGE_PHU	0x0020  /* used for 256M page size bit */
 #define _PAGE_PSE	0x0040  /* used for 8M page size bit */
 #define _PAGE_PROTNONE	0x0080  /* used for numa page balancing */
+#define _PAGE_SPECIAL	0x0100
 #define _PAGE_KRE	0x0400	/* xxx - see below on the "accessed" bit */
 #define _PAGE_URE	0x0800	/* xxx */
 #define _PAGE_KWE	0x4000	/* used to do the dirty bit in software */
@@ -123,7 +124,7 @@ static inline void set_pmd_at(struct mm_struct *mm, unsigned long addr,
 #define _PTE_FLAGS_BITS	(64 - _PFN_BITS)
 
 #define _PAGE_TABLE	(_PAGE_VALID | __DIRTY_BITS | __ACCESS_BITS)
-#define _PAGE_CHG_MASK	(_PFN_MASK | __DIRTY_BITS | __ACCESS_BITS)
+#define _PAGE_CHG_MASK	(_PFN_MASK | __DIRTY_BITS | __ACCESS_BITS | _PAGE_SPECIAL)
 #define _HPAGE_CHG_MASK (_PAGE_CHG_MASK | _PAGE_PSE | _PAGE_PHU)
 
 /*
@@ -456,6 +457,11 @@ static inline int pte_young(pte_t pte)
 	return pte_val(pte) & _PAGE_ACCESSED;
 }
 
+static inline int pte_special(pte_t pte)
+{
+	return pte_val(pte) & _PAGE_SPECIAL;
+}
+
 static inline pte_t pte_wrprotect(pte_t pte)
 {
 	pte_val(pte) |= _PAGE_FOW;
@@ -499,6 +505,12 @@ static inline pte_t pte_mkhuge(pte_t pte)
 	return pte;
 }
 
+static inline pte_t pte_mkspecial(pte_t pte)
+{
+	pte_val(pte) |= _PAGE_SPECIAL;
+	return pte;
+}
+
 #ifdef CONFIG_NUMA_BALANCING
 /*
  * See the comment in include/asm-generic/pgtable.h
-- 
2.34.1

