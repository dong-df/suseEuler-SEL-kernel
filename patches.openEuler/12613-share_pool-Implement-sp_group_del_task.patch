From dc95c861c014c53f84a0f293dad676f57607ede1 Mon Sep 17 00:00:00 2001
From: Wang Wensheng <wangwensheng4@huawei.com>
Date: Thu, 30 Dec 2021 16:27:11 +0800
Subject: [PATCH] share_pool: Implement sp_group_del_task()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: dc95c861c014c53f84a0f293dad676f57607ede1


ascend inclusion
category: Feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4NDAW
CVE: NA

-------------------

This interface is added to support the function of
exiting a process from a sharing group.

Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
Signed-off-by: Guo Mengqi <guomengqi3@huawei.com>
Signed-off-by: Zhou Guanghui <zhouguanghui1@huawei.com>
Reviewed-by: Kefeng Wang<wangkefeng.wang@huawei.com>
Reviewed-by: Weilong Chen <chenweilong@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 mm/share_pool.c | 121 +++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 119 insertions(+), 2 deletions(-)

diff --git a/mm/share_pool.c b/mm/share_pool.c
index 6d64086e0cd9..8dc64232f0db 100644
--- a/mm/share_pool.c
+++ b/mm/share_pool.c
@@ -156,6 +156,21 @@ static struct sp_group_master *sp_init_group_master_locked(
 	return master;
 }
 
+static struct sp_proc_stat *sp_get_proc_stat(struct mm_struct *mm)
+{
+	struct sp_proc_stat *stat;
+
+	if (!mm->sp_group_master)
+		return NULL;
+
+	down_read(&sp_proc_stat_sem);
+	stat = mm->sp_group_master->stat;
+	up_read(&sp_proc_stat_sem);
+
+	/* maybe NULL or not, we always return it */
+	return stat;
+}
+
 static struct sp_proc_stat *create_proc_stat(struct mm_struct *mm,
 					     struct task_struct *tsk)
 {
@@ -1383,7 +1398,26 @@ int sp_group_add_task(int pid, int spg_id)
 }
 EXPORT_SYMBOL_GPL(sp_group_add_task);
 
-static void __sp_area_drop_locked(struct sp_area *spa);
+static void free_spg_proc_stat(struct mm_struct *mm, int spg_id)
+{
+	int i;
+	struct sp_proc_stat *proc_stat = sp_get_proc_stat(mm);
+	struct spg_proc_stat *stat;
+	struct sp_spg_stat *spg_stat;
+	struct hlist_node *tmp;
+
+	hash_for_each_safe(proc_stat->hash, i, tmp, stat, pnode) {
+		if (stat->spg_id == spg_id) {
+			spg_stat = stat->spg_stat;
+			mutex_lock(&spg_stat->lock);
+			hash_del(&stat->gnode);
+			mutex_unlock(&spg_stat->lock);
+			hash_del(&stat->pnode);
+			kfree(stat);
+			break;
+		}
+	}
+}
 
 /**
  * mg_sp_group_del_task() - delete a process from a sp group.
@@ -1399,7 +1433,90 @@ static void __sp_area_drop_locked(struct sp_area *spa);
  */
 int mg_sp_group_del_task(int pid, int spg_id)
 {
-	return 0;
+	int ret = 0;
+	struct sp_group *spg;
+	struct sp_group_node *spg_node;
+	struct task_struct *tsk = NULL;
+	struct mm_struct *mm = NULL;
+	bool is_alive = true;
+
+	if (spg_id < SPG_ID_MIN || spg_id > SPG_ID_AUTO) {
+		pr_err_ratelimited("del from group failed, invalid group id %d\n", spg_id);
+		return -EINVAL;
+	}
+
+	spg = __sp_find_spg(pid, spg_id);
+	if (!spg) {
+		pr_err_ratelimited("spg not found or get task failed.");
+		return -EINVAL;
+	}
+	down_write(&sp_group_sem);
+
+	if (!spg_valid(spg)) {
+		up_write(&sp_group_sem);
+		pr_err_ratelimited("spg dead.");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	if (!list_empty(&spg->spa_list)) {
+		up_write(&sp_group_sem);
+		pr_err_ratelimited("spa is not empty");
+		ret = -EINVAL;
+		goto out;
+	}
+
+	ret = get_task(pid, &tsk);
+	if (ret) {
+		up_write(&sp_group_sem);
+		pr_err_ratelimited("task is not found");
+		goto out;
+	}
+	mm = get_task_mm(tsk->group_leader);
+	if (!mm) {
+		up_write(&sp_group_sem);
+		pr_err_ratelimited("mm is not found");
+		ret = -ESRCH;
+		goto out_put_task;
+	}
+
+	spg_node = is_process_in_group(spg, mm);
+	if (!spg_node) {
+		up_write(&sp_group_sem);
+		pr_err_ratelimited("process not in group");
+		ret = -ESRCH;
+		goto out_put_mm;
+	}
+
+	down_write(&spg->rw_lock);
+	if (list_is_singular(&spg->procs))
+		is_alive = spg->is_alive = false;
+	spg->proc_num--;
+	list_del(&spg_node->proc_node);
+	sp_group_drop(spg);
+	up_write(&spg->rw_lock);
+	if (!is_alive)
+		blocking_notifier_call_chain(&sp_notifier_chain, 0, spg);
+
+	list_del(&spg_node->group_node);
+	mm->sp_group_master->count--;
+	kfree(spg_node);
+	if (atomic_sub_and_test(1, &mm->mm_users)) {
+		up_write(&sp_group_sem);
+		WARN(1, "Invalid user counting\n");
+		return -EINVAL;
+	}
+
+	free_spg_proc_stat(mm, spg_id);
+	up_write(&sp_group_sem);
+
+out_put_mm:
+	mmput(mm);
+out_put_task:
+	put_task_struct(tsk);
+out:
+	sp_group_drop(spg); /* if spg dead, freed here */
+	return ret;
 }
 EXPORT_SYMBOL_GPL(mg_sp_group_del_task);
 
-- 
2.26.2

