From fdd926760a518c1d3ea7ddcf246144f356209881 Mon Sep 17 00:00:00 2001
From: Hou Tao <houtao1@huawei.com>
Date: Mon, 23 May 2022 21:18:13 +0800
Subject: [PATCH] vfs: add bare tracepoints for vfs read and release
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: fdd926760a518c1d3ea7ddcf246144f356209881
Modified-by-SEL: No


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I53R0H
CVE: NA
backport: openEuler-22.03-LTS

---------------------------

Add a writable bare tracepoint fs_file_read() and a bare
tracepoint fs_file_release().

A version field is added to fs_file_read() to support
extension of fs_file_read_ctx in future.

These two tracepoints need to be exported and will be
used by filesystem kernel module.

Signed-off-by: Hou Tao <houtao1@huawei.com>
Acked-by: fang wei <fangwei1@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Zhihao Cheng <chengzhihao1@huawei.com>
Reviewed-by: Zhang Yi <yi.zhang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 fs/read_write.c           |  5 +++++
 include/linux/fs.h        | 17 +++++++++++++++++
 include/trace/events/fs.h | 33 +++++++++++++++++++++++++++++++++
 3 files changed, 55 insertions(+)
 create mode 100644 include/trace/events/fs.h

diff --git a/fs/read_write.c b/fs/read_write.c
index 88f445da7515..433ca8ab7c91 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -24,6 +24,8 @@
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
+#define CREATE_TRACE_POINTS
+#include <trace/events/fs.h>
 
 const struct file_operations generic_ro_fops = {
 	.llseek		= generic_file_llseek,
@@ -1679,3 +1681,6 @@ int generic_file_rw_checks(struct file *file_in, struct file *file_out)
 
 	return 0;
 }
+
+EXPORT_TRACEPOINT_SYMBOL_GPL(fs_file_read);
+EXPORT_TRACEPOINT_SYMBOL_GPL(fs_file_release);
diff --git a/include/linux/fs.h b/include/linux/fs.h
index dd023a3023b5..1ed02fc8bdd0 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -3562,4 +3562,21 @@ static inline int inode_drain_writes(struct inode *inode)
 	return filemap_write_and_wait(inode->i_mapping);
 }
 
+struct fs_file_read_ctx {
+	const unsigned char *name;
+	unsigned int f_ctl_mode;
+	unsigned int rsvd;
+	/* clear from f_ctl_mode */
+	unsigned int clr_f_ctl_mode;
+	/* set into f_ctl_mode */
+	unsigned int set_f_ctl_mode;
+	unsigned long key;
+	/* file size */
+	long long i_size;
+	/* previous page index */
+	long long prev_index;
+	/* current page index */
+	long long index;
+};
+
 #endif /* _LINUX_FS_H */
diff --git a/include/trace/events/fs.h b/include/trace/events/fs.h
new file mode 100644
index 000000000000..ee82dad9d9da
--- /dev/null
+++ b/include/trace/events/fs.h
@@ -0,0 +1,33 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM fs
+
+#if !defined(_TRACE_FS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_FS_H
+
+#include <linux/types.h>
+#include <linux/tracepoint.h>
+#include <linux/fs.h>
+
+#undef FS_DECLARE_TRACE
+#ifdef DECLARE_TRACE_WRITABLE
+#define FS_DECLARE_TRACE(call, proto, args, size) \
+	DECLARE_TRACE_WRITABLE(call, PARAMS(proto), PARAMS(args), size)
+#else
+#define FS_DECLARE_TRACE(call, proto, args, size) \
+	DECLARE_TRACE(call, PARAMS(proto), PARAMS(args))
+#endif
+
+FS_DECLARE_TRACE(fs_file_read,
+	TP_PROTO(struct fs_file_read_ctx *ctx, int version),
+	TP_ARGS(ctx, version),
+	sizeof(struct fs_file_read_ctx));
+
+DECLARE_TRACE(fs_file_release,
+	TP_PROTO(struct inode *inode, struct file *filp),
+	TP_ARGS(inode, filp));
+
+#endif /* _TRACE_FS_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>
-- 
2.34.1

