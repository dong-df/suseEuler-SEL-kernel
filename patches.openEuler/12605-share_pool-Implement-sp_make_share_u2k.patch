From 1e24465d8722c040c9e8ae38493a1bf984eb7a37 Mon Sep 17 00:00:00 2001
From: Wang Wensheng <wangwensheng4@huawei.com>
Date: Thu, 30 Dec 2021 16:27:03 +0800
Subject: [PATCH] share_pool: Implement sp_make_share_u2k()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 1e24465d8722c040c9e8ae38493a1bf984eb7a37


ascend inclusion
category: Feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4NDAW
CVE: NA

-------------------

This function could map a user memory to kernel vmalloc space.

Signed-off-by: Wang Wensheng <wangwensheng4@huawei.com>
Signed-off-by: Tang Yizhou <tangyizhou@huawei.com>
Signed-off-by: Peng Wu <wupeng58@huawei.com>
Reviewed-by: Kefeng Wang<wangkefeng.wang@huawei.com>
Reviewed-by: Weilong Chen <chenweilong@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 mm/share_pool.c | 56 ++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 55 insertions(+), 1 deletion(-)

diff --git a/mm/share_pool.c b/mm/share_pool.c
index 1cd1a64f2a8c..4d45a2519b10 100644
--- a/mm/share_pool.c
+++ b/mm/share_pool.c
@@ -1358,7 +1358,61 @@ static void __sp_walk_page_free(struct sp_walk_data *data)
  */
 void *sp_make_share_u2k(unsigned long uva, unsigned long size, int pid)
 {
-	return NULL;
+	int ret = 0;
+	struct mm_struct *mm = current->mm;
+	void *p = ERR_PTR(-ESRCH);
+	struct sp_walk_data sp_walk_data = {
+		.page_count = 0,
+	};
+	struct vm_struct *area;
+
+	check_interrupt_context();
+
+	if (mm == NULL) {
+		pr_err("u2k: kthread is not allowed\n");
+		return ERR_PTR(-EPERM);
+	}
+
+	down_write(&mm->mmap_lock);
+	if (unlikely(mm->core_state)) {
+		up_write(&mm->mmap_lock);
+		pr_err("u2k: encountered coredump, abort\n");
+		return p;
+	}
+
+	ret = __sp_walk_page_range(uva, size, mm, &sp_walk_data);
+	if (ret) {
+		pr_err_ratelimited("walk page range failed %d\n", ret);
+		up_write(&mm->mmap_lock);
+		return ERR_PTR(ret);
+	}
+
+	if (sp_walk_data.is_hugepage)
+		p = vmap_hugepage(sp_walk_data.pages, sp_walk_data.page_count,
+				  VM_MAP, PAGE_KERNEL);
+	else
+		p = vmap(sp_walk_data.pages, sp_walk_data.page_count, VM_MAP,
+			 PAGE_KERNEL);
+	up_write(&mm->mmap_lock);
+
+	if (!p) {
+		pr_err("vmap(huge) in u2k failed\n");
+		__sp_walk_page_free(&sp_walk_data);
+		return ERR_PTR(-ENOMEM);
+	}
+
+	p = p + (uva - sp_walk_data.uva_aligned);
+
+	/*
+	 * kva p may be used later in k2u. Since p comes from uva originally,
+	 * it's reasonable to add flag VM_USERMAP so that p can be remapped
+	 * into userspace again.
+	 */
+	area = find_vm_area(p);
+	area->flags |= VM_USERMAP;
+
+	kvfree(sp_walk_data.pages);
+	return p;
 }
 EXPORT_SYMBOL_GPL(sp_make_share_u2k);
 
-- 
2.26.2

