From 20730f44678838b9505b4d0079e79dd0da670dc9 Mon Sep 17 00:00:00 2001
From: Zhang Qiao <zhangqiao22@huawei.com>
Date: Tue, 8 Mar 2022 22:06:06 +0800
Subject: [PATCH] sched: Fix sleeping in atomic context at cpu_qos_write()
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 20730f44678838b9505b4d0079e79dd0da670dc9
Modified-by-SEL: No


hulk inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I4WKMY
CVE: NA

--------------------------------

cfs_bandwidth_usage_inc() need hold jump_label_mutex and
might sleep, so we can not call it in atomic context.
Fix this by moving cfs_bandwidth_usage_{inc,dec}() out of
rcu read critical section.

Signed-off-by: Zhang Qiao <zhangqiao22@huawei.com>
Reviewed-by: Chen Hui <judy.chenhui@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 kernel/sched/core.c | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 46d219b87109..a8358ddba7ef 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -8507,13 +8507,10 @@ static int tg_change_scheduler(struct task_group *tg, void *data)
 	struct cgroup_subsys_state *css = &tg->css;
 
 	tg->qos_level = qos_level;
-	if (qos_level == -1) {
+	if (qos_level == -1)
 		policy = SCHED_IDLE;
-		cfs_bandwidth_usage_inc();
-	} else {
+	else
 		policy = SCHED_NORMAL;
-		cfs_bandwidth_usage_dec();
-	}
 
 	param.sched_priority = 0;
 	css_task_iter_start(css, 0, &it);
@@ -8541,6 +8538,13 @@ static int cpu_qos_write(struct cgroup_subsys_state *css,
 	if (tg->qos_level == -1 && qos_level == 0)
 		return -EINVAL;
 
+	cpus_read_lock();
+	if (qos_level == -1)
+		cfs_bandwidth_usage_inc();
+	else
+		cfs_bandwidth_usage_dec();
+	cpus_read_unlock();
+
 	rcu_read_lock();
 	walk_tg_tree_from(tg, tg_change_scheduler, tg_nop, (void *)(&qos_level));
 	rcu_read_unlock();
-- 
2.26.2

