From 8a15057d84c7cc7fbb5cbcea212561284adea0d8 Mon Sep 17 00:00:00 2001
From: Cheng Jian <cj.chengjian@huawei.com>
Date: Sat, 29 May 2021 14:42:56 +0800
Subject: [PATCH] livepatch/x86: check active func in consistency stack
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 8a15057d84c7cc7fbb5cbcea212561284adea0d8

 checking

hulk inclusion
category: bugfix
bugzilla: 51919
CVE: NA

---------------------------

When doing consistency stack checking, if we try to patch a
function which has been patched already. We should check the
new function(not the origin func) that is activeness currently,
it's always the first entry in list func_node->func_stack.

Example :
	module : origin			livepatch v1		livepatch v2
	func   : old func A -[enable]=> new func A' -[enable]=> new func A''
	check  :		A			A'

when we try to patch function A to new function A'' by livepatch
v2, but the func A has already patched to function A' by livepatch
v1, so function A' which provided in livepatch v1 is active in the
stack instead of origin function A. Even if the long jump method is
used, we jump to the new function A' using a call without LR, the
origin function A will not appear in the stack. We must check the
active function A' in consistency stack checking.

Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
Reviewed-By: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>

Signed-off-by: Dong Kai <dongkai11@huawei.com>

Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
Reviewed-by: Yang Jihong <yangjihong1@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/x86/kernel/livepatch.c | 86 ++++++++++++++++++++++++-------------
 1 file changed, 57 insertions(+), 29 deletions(-)

diff --git a/arch/x86/kernel/livepatch.c b/arch/x86/kernel/livepatch.c
index 71bcf36903cc..f38892868a46 100644
--- a/arch/x86/kernel/livepatch.c
+++ b/arch/x86/kernel/livepatch.c
@@ -26,6 +26,36 @@
 #include <asm/stacktrace.h>
 #include <asm/set_memory.h>
 
+#include <linux/slab.h>
+#include <asm/nops.h>
+#include <asm/sections.h>
+
+#if defined (CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY) || \
+    defined (CONFIG_LIVEPATCH_WO_FTRACE)
+#define	JMP_E9_INSN_SIZE	5
+
+struct klp_func_node {
+	struct list_head node;
+	struct list_head func_stack;
+	void *old_func;
+	unsigned char old_code[JMP_E9_INSN_SIZE];
+};
+
+static LIST_HEAD(klp_func_list);
+
+static struct klp_func_node *klp_find_func_node(void *old_func)
+{
+	struct klp_func_node *func_node;
+
+	list_for_each_entry(func_node, &klp_func_list, node) {
+		if (func_node->old_func == old_func)
+			return func_node;
+	}
+
+	return NULL;
+}
+#endif
+
 #ifdef CONFIG_LIVEPATCH_STOP_MACHINE_CONSISTENCY
 static inline int klp_compare_address(unsigned long stack_addr,
 		unsigned long func_addr, unsigned long func_size,
@@ -48,6 +78,7 @@ static int klp_check_stack_func(struct klp_func *func,
 #endif
 	unsigned long func_addr, func_size, address;
 	const char *func_name;
+	struct klp_func_node *func_node;
 	int i;
 
 #ifdef CONFIG_ARCH_STACKWALK
@@ -59,9 +90,33 @@ static int klp_check_stack_func(struct klp_func *func,
 #endif
 
 		if (enable) {
-			func_addr = (unsigned long)func->old_func;
-			func_size = func->old_size;
+			/*
+			 * When enable, checking the currently active
+			 * functions.
+			 */
+			func_node = klp_find_func_node(func->old_func);
+			if (!func_node ||
+			    list_empty(&func_node->func_stack)) {
+				func_addr = (unsigned long)func->old_func;
+				func_size = func->old_size;
+			} else {
+				/*
+				 * Previously patched function
+				 * [the active one]
+				 */
+				struct klp_func *prev;
+
+				prev = list_first_or_null_rcu(
+						&func_node->func_stack,
+						struct klp_func, stack_node);
+				func_addr = (unsigned long)prev->new_func;
+				func_size = prev->new_size;
+			}
 		} else {
+			/*
+			 * When disable, check for the function itself
+			 * which to be unpatched.
+			 */
 			func_addr = (unsigned long)func->new_func;
 			func_size = func->new_size;
 		}
@@ -191,33 +246,6 @@ int klp_check_calltrace(struct klp_patch *patch, int enable)
 #endif
 
 #ifdef CONFIG_LIVEPATCH_WO_FTRACE
-#include <linux/slab.h>
-#include <asm/nops.h>
-#include <asm/sections.h>
-
-#define	JMP_E9_INSN_SIZE	5
-
-struct klp_func_node {
-	struct list_head node;
-	struct list_head func_stack;
-	void *old_func;
-	unsigned char old_code[JMP_E9_INSN_SIZE];
-};
-
-static LIST_HEAD(klp_func_list);
-
-static struct klp_func_node *klp_find_func_node(void *old_func)
-{
-	struct klp_func_node *func_node;
-
-	list_for_each_entry(func_node, &klp_func_list, node) {
-		if (func_node->old_func == old_func)
-			return func_node;
-	}
-
-	return NULL;
-}
-
 static void *klp_jmp_code(unsigned long ip, unsigned long addr)
 {
 	return text_gen_insn(JMP32_INSN_OPCODE, (void *)ip, (void *)addr);
-- 
2.26.2

