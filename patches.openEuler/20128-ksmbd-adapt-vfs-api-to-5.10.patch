From aed80549347df2c97c61660884220b4852c0eb3a Mon Sep 17 00:00:00 2001
From: Jason Yan <yanaijie@huawei.com>
Date: Mon, 14 Nov 2022 20:51:09 +0800
Subject: [PATCH] ksmbd: adapt vfs api to 5.10
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: aed80549347df2c97c61660884220b4852c0eb3a
Modified-by-SEL: Yes, modified due to different context


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I60T7G
CVE: NA

-------------------------------

These vfs apis have not supported user namespace in 5.10, so we need to
adapt these apis to remove all user namespace parameters.

Signed-off-by: Jason Yan <yanaijie@huawei.com>
Signed-off-by: Zhong Jinghua <zhongjinghua@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 fs/ksmbd/smb2pdu.c |   27 ++++++++++++--------------
 fs/ksmbd/smbacl.c  |    2 -
 fs/ksmbd/vfs.c     |   54 +++++++++++++++++++++++------------------------------
 3 files changed, 38 insertions(+), 45 deletions(-)

--- a/fs/ksmbd/smb2pdu.c
+++ b/fs/ksmbd/smb2pdu.c
@@ -2749,7 +2749,7 @@ int smb2_open(struct ksmbd_work *work)
 		rc = 0;
 	} else {
 		file_present = true;
-		generic_fillattr(&init_user_ns, d_inode(path.dentry), &stat);
+		generic_fillattr(d_inode(path.dentry), &stat);
 	}
 	if (stream_name) {
 		if (req->CreateOptions & FILE_DIRECTORY_FILE_LE) {
@@ -2866,8 +2866,7 @@ int smb2_open(struct ksmbd_work *work)
 		 * is already granted.
 		 */
 		if (daccess & ~(FILE_READ_ATTRIBUTES_LE | FILE_READ_CONTROL_LE)) {
-			rc = inode_permission(&init_user_ns,
-					      d_inode(path.dentry),
+			rc = inode_permission(d_inode(path.dentry),
 					      may_flags);
 			if (rc)
 				goto err_out;
@@ -3027,7 +3026,7 @@ int smb2_open(struct ksmbd_work *work)
 
 	rc = ksmbd_vfs_getattr(&path, &stat);
 	if (rc) {
-		generic_fillattr(&init_user_ns, d_inode(path.dentry), &stat);
+		generic_fillattr(d_inode(path.dentry), &stat);
 		rc = 0;
 	}
 
@@ -3132,7 +3131,7 @@ int smb2_open(struct ksmbd_work *work)
 
 	memcpy(fp->client_guid, conn->ClientGUID, SMB2_CLIENT_GUID_SIZE);
 
-	generic_fillattr(&init_user_ns, file_inode(fp->filp), &stat);
+	generic_fillattr(file_inode(fp->filp), &stat);
 
 	rsp->StructureSize = cpu_to_le16(89);
 	rcu_read_lock();
@@ -3863,7 +3862,7 @@ int smb2_query_dir(struct ksmbd_work *wo
 	}
 
 	if (!(dir_fp->daccess & FILE_LIST_DIRECTORY_LE) ||
-	    inode_permission(&init_user_ns, file_inode(dir_fp->filp),
+	    inode_permission(file_inode(dir_fp->filp),
 			     MAY_READ | MAY_EXEC)) {
 		pr_err("no right to enumerate directory (%pd)\n",
 		       dir_fp->filp->f_path.dentry);
@@ -4299,7 +4298,7 @@ static int get_file_basic_info(struct sm
 	}
 
 	basic_info = (struct smb2_file_basic_info *)rsp->Buffer;
-	generic_fillattr(&init_user_ns, file_inode(fp->filp), &stat);
+	generic_fillattr(file_inode(fp->filp), &stat);
 	basic_info->CreationTime = cpu_to_le64(fp->create_time);
 	time = ksmbd_UnixTimeToNT(stat.atime);
 	basic_info->LastAccessTime = cpu_to_le64(time);
@@ -4339,7 +4338,7 @@ static void get_file_standard_info(struc
 	struct kstat stat;
 
 	inode = file_inode(fp->filp);
-	generic_fillattr(&init_user_ns, inode, &stat);
+	generic_fillattr(inode, &stat);
 
 	sinfo = (struct smb2_file_standard_info *)rsp->Buffer;
 	delete_pending = ksmbd_inode_pending_delete(fp);
@@ -4393,7 +4392,7 @@ static int get_file_all_info(struct ksmb
 		return -ENOMEM;
 
 	inode = file_inode(fp->filp);
-	generic_fillattr(&init_user_ns, inode, &stat);
+	generic_fillattr(inode, &stat);
 
 	ksmbd_debug(SMB, "filename = %s\n", filename);
 	delete_pending = ksmbd_inode_pending_delete(fp);
@@ -4470,7 +4469,7 @@ static void get_file_stream_info(struct
 	int buf_free_len;
 	struct smb2_query_info_req *req = ksmbd_req_buf_next(work);
 
-	generic_fillattr(&init_user_ns, file_inode(fp->filp), &stat);
+	generic_fillattr(file_inode(fp->filp), &stat);
 	file_info = (struct smb2_file_stream_info *)rsp->Buffer;
 
 	buf_free_len =
@@ -4560,7 +4559,7 @@ static void get_file_internal_info(struc
 	struct smb2_file_internal_info *file_info;
 	struct kstat stat;
 
-	generic_fillattr(&init_user_ns, file_inode(fp->filp), &stat);
+	generic_fillattr(file_inode(fp->filp), &stat);
 	file_info = (struct smb2_file_internal_info *)rsp->Buffer;
 	file_info->IndexNumber = cpu_to_le64(stat.ino);
 	rsp->OutputBufferLength =
@@ -4585,7 +4584,7 @@ static int get_file_network_open_info(st
 	file_info = (struct smb2_file_ntwrk_info *)rsp->Buffer;
 
 	inode = file_inode(fp->filp);
-	generic_fillattr(&init_user_ns, inode, &stat);
+	generic_fillattr(inode, &stat);
 
 	file_info->CreationTime = cpu_to_le64(fp->create_time);
 	time = ksmbd_UnixTimeToNT(stat.atime);
@@ -4646,7 +4645,7 @@ static void get_file_compression_info(st
 	struct smb2_file_comp_info *file_info;
 	struct kstat stat;
 
-	generic_fillattr(&init_user_ns, file_inode(fp->filp), &stat);
+	generic_fillattr(file_inode(fp->filp), &stat);
 
 	file_info = (struct smb2_file_comp_info *)rsp->Buffer;
 	file_info->CompressedFileSize = cpu_to_le64(stat.blocks << 9);
@@ -5621,7 +5620,7 @@ static int set_file_basic_info(struct ks
 		inode_lock(inode);
 		inode->i_ctime = attrs.ia_ctime;
 		attrs.ia_valid &= ~ATTR_CTIME;
-		rc = notify_change(&init_user_ns, dentry, &attrs, NULL);
+		rc = notify_change(dentry, &attrs, NULL);
 		inode_unlock(inode);
 	}
 	return rc;
--- a/fs/ksmbd/smbacl.c
+++ b/fs/ksmbd/smbacl.c
@@ -1335,7 +1335,7 @@ int set_info_sec(struct ksmbd_conn *conn
 		rc = set_posix_acl(inode,
 				   ACL_TYPE_ACCESS, fattr.cf_acls);
 		if (S_ISDIR(inode->i_mode) && fattr.cf_dacls)
-			rc = set_posix_acl(&init_user_ns, inode,
+			rc = set_posix_acl(inode,
 					   ACL_TYPE_DEFAULT, fattr.cf_dacls);
 	}
 
--- a/fs/ksmbd/vfs.c
+++ b/fs/ksmbd/vfs.c
@@ -108,7 +108,7 @@ int ksmbd_vfs_may_delete(struct dentry *
 		return ret;
 	}
 
-	ret = inode_permission(&init_user_ns, d_inode(parent),
+	ret = inode_permission(d_inode(parent),
 			       MAY_EXEC | MAY_WRITE);
 
 	inode_unlock(d_inode(parent));
@@ -123,16 +123,16 @@ int ksmbd_vfs_query_maximal_access(struc
 
 	*daccess = cpu_to_le32(FILE_READ_ATTRIBUTES | READ_CONTROL);
 
-	if (!inode_permission(&init_user_ns, d_inode(dentry), MAY_OPEN | MAY_WRITE))
+	if (!inode_permission(d_inode(dentry), MAY_OPEN | MAY_WRITE))
 		*daccess |= cpu_to_le32(WRITE_DAC | WRITE_OWNER | SYNCHRONIZE |
 				FILE_WRITE_DATA | FILE_APPEND_DATA |
 				FILE_WRITE_EA | FILE_WRITE_ATTRIBUTES |
 				FILE_DELETE_CHILD);
 
-	if (!inode_permission(&init_user_ns, d_inode(dentry), MAY_OPEN | MAY_READ))
+	if (!inode_permission(d_inode(dentry), MAY_OPEN | MAY_READ))
 		*daccess |= FILE_READ_DATA_LE | FILE_READ_EA_LE;
 
-	if (!inode_permission(&init_user_ns, d_inode(dentry), MAY_OPEN | MAY_EXEC))
+	if (!inode_permission(d_inode(dentry), MAY_OPEN | MAY_EXEC))
 		*daccess |= FILE_EXECUTE_LE;
 
 	parent = dget_parent(dentry);
@@ -142,7 +142,7 @@ int ksmbd_vfs_query_maximal_access(struc
 		return ret;
 	}
 
-	if (!inode_permission(&init_user_ns, d_inode(parent), MAY_EXEC | MAY_WRITE))
+	if (!inode_permission(d_inode(parent), MAY_EXEC | MAY_WRITE))
 		*daccess |= FILE_DELETE_LE;
 
 	inode_unlock(d_inode(parent));
@@ -175,7 +175,7 @@ int ksmbd_vfs_create(struct ksmbd_work *
 	}
 
 	mode |= S_IFREG;
-	err = vfs_create(&init_user_ns, d_inode(path.dentry), dentry, mode, true);
+	err = vfs_create(d_inode(path.dentry), dentry, mode, true);
 	if (!err) {
 		ksmbd_vfs_inherit_owner(work, d_inode(path.dentry),
 					d_inode(dentry));
@@ -212,7 +212,7 @@ int ksmbd_vfs_mkdir(struct ksmbd_work *w
 	}
 
 	mode |= S_IFDIR;
-	err = vfs_mkdir(&init_user_ns, d_inode(path.dentry), dentry, mode);
+	err = vfs_mkdir(d_inode(path.dentry), dentry, mode);
 	if (err) {
 		goto out;
 	} else if (d_unhashed(dentry)) {
@@ -604,12 +604,12 @@ int ksmbd_vfs_remove_file(struct ksmbd_w
 	}
 
 	if (S_ISDIR(d_inode(path.dentry)->i_mode)) {
-		err = vfs_rmdir(&init_user_ns, d_inode(parent), path.dentry);
+		err = vfs_rmdir(d_inode(parent), path.dentry);
 		if (err && err != -ENOTEMPTY)
 			ksmbd_debug(VFS, "%s: rmdir failed, err %d\n", name,
 				    err);
 	} else {
-		err = vfs_unlink(&init_user_ns, d_inode(parent), path.dentry,
+		err = vfs_unlink(d_inode(parent), path.dentry,
 				 NULL);
 		if (err)
 			ksmbd_debug(VFS, "%s: unlink failed, err %d\n", name,
@@ -663,7 +663,7 @@ int ksmbd_vfs_link(struct ksmbd_work *wo
 		goto out3;
 	}
 
-	err = vfs_link(oldpath.dentry, &init_user_ns, d_inode(newpath.dentry),
+	err = vfs_link(oldpath.dentry, d_inode(newpath.dentry),
 		       dentry, NULL);
 	if (err)
 		ksmbd_debug(VFS, "vfs_link failed err %d\n", err);
@@ -737,15 +737,9 @@ static int __ksmbd_vfs_rename(struct ksm
 
 	err = -ENOTEMPTY;
 	if (dst_dent != trap_dent && !d_really_is_positive(dst_dent)) {
-		struct renamedata rd = {
-			.old_mnt_userns	= &init_user_ns,
-			.old_dir	= d_inode(src_dent_parent),
-			.old_dentry	= src_dent,
-			.new_mnt_userns	= &init_user_ns,
-			.new_dir	= d_inode(dst_dent_parent),
-			.new_dentry	= dst_dent,
-		};
-		err = vfs_rename(&rd);
+		err = vfs_rename(d_inode(src_dent_parent), src_dent,
+				 d_inode(dst_dent_parent), dst_dent,
+				 NULL, 0);
 	}
 	if (err)
 		pr_err("vfs_rename failed err %d\n", err);
@@ -893,7 +887,7 @@ ssize_t ksmbd_vfs_listxattr(struct dentr
 
 static ssize_t ksmbd_vfs_xattr_len(struct dentry *dentry, char *xattr_name)
 {
-	return vfs_getxattr(&init_user_ns, dentry, xattr_name, NULL, 0);
+	return vfs_getxattr(dentry, xattr_name, NULL, 0);
 }
 
 /**
@@ -919,7 +913,7 @@ ssize_t ksmbd_vfs_getxattr(struct dentry
 	if (!buf)
 		return -ENOMEM;
 
-	xattr_len = vfs_getxattr(&init_user_ns, dentry, xattr_name,
+	xattr_len = vfs_getxattr(dentry, xattr_name,
 				 (void *)buf, xattr_len);
 	if (xattr_len > 0)
 		*xattr_buf = buf;
@@ -943,7 +937,7 @@ int ksmbd_vfs_setxattr(struct dentry *de
 {
 	int err;
 
-	err = vfs_setxattr(&init_user_ns, dentry,
+	err = vfs_setxattr(dentry,
 			   attr_name,
 			   attr_value,
 			   attr_size,
@@ -1052,7 +1046,7 @@ int ksmbd_vfs_fqar_lseek(struct ksmbd_fi
 
 int ksmbd_vfs_remove_xattr(struct dentry *dentry, char *attr_name)
 {
-	return vfs_removexattr(&init_user_ns, dentry, attr_name);
+	return vfs_removexattr(dentry, attr_name);
 }
 
 int ksmbd_vfs_unlink(struct dentry *dir, struct dentry *dentry)
@@ -1065,9 +1059,9 @@ int ksmbd_vfs_unlink(struct dentry *dir,
 	dget(dentry);
 
 	if (S_ISDIR(d_inode(dentry)->i_mode))
-		err = vfs_rmdir(&init_user_ns, d_inode(dir), dentry);
+		err = vfs_rmdir(d_inode(dir), dentry);
 	else
-		err = vfs_unlink(&init_user_ns, d_inode(dir), dentry, NULL);
+		err = vfs_unlink(d_inode(dir), dentry, NULL);
 
 	dput(dentry);
 	inode_unlock(d_inode(dir));
@@ -1600,7 +1594,7 @@ int ksmbd_vfs_fill_dentry_attrs(struct k
 	u64 time;
 	int rc;
 
-	generic_fillattr(&init_user_ns, d_inode(dentry), ksmbd_kstat->kstat);
+	generic_fillattr(d_inode(dentry), ksmbd_kstat->kstat);
 
 	time = ksmbd_UnixTimeToNT(ksmbd_kstat->kstat->ctime);
 	ksmbd_kstat->create_time = time;
@@ -1793,13 +1787,13 @@ int ksmbd_vfs_set_init_posix_acl(struct
 		return -ENOMEM;
 	}
 	posix_state_to_acl(&acl_state, acls->a_entries);
-	rc = set_posix_acl(&init_user_ns, inode, ACL_TYPE_ACCESS, acls);
+	rc = set_posix_acl(inode, ACL_TYPE_ACCESS, acls);
 	if (rc < 0)
 		ksmbd_debug(SMB, "Set posix acl(ACL_TYPE_ACCESS) failed, rc : %d\n",
 			    rc);
 	else if (S_ISDIR(inode->i_mode)) {
 		posix_state_to_acl(&acl_state, acls->a_entries);
-		rc = set_posix_acl(&init_user_ns, inode, ACL_TYPE_DEFAULT,
+		rc = set_posix_acl(inode, ACL_TYPE_DEFAULT,
 				   acls);
 		if (rc < 0)
 			ksmbd_debug(SMB, "Set posix acl(ACL_TYPE_DEFAULT) failed, rc : %d\n",
@@ -1831,12 +1825,12 @@ int ksmbd_vfs_inherit_posix_acl(struct i
 		}
 	}
 
-	rc = set_posix_acl(&init_user_ns, inode, ACL_TYPE_ACCESS, acls);
+	rc = set_posix_acl(inode, ACL_TYPE_ACCESS, acls);
 	if (rc < 0)
 		ksmbd_debug(SMB, "Set posix acl(ACL_TYPE_ACCESS) failed, rc : %d\n",
 			    rc);
 	if (S_ISDIR(inode->i_mode)) {
-		rc = set_posix_acl(&init_user_ns, inode, ACL_TYPE_DEFAULT,
+		rc = set_posix_acl(inode, ACL_TYPE_DEFAULT,
 				   acls);
 		if (rc < 0)
 			ksmbd_debug(SMB, "Set posix acl(ACL_TYPE_DEFAULT) failed, rc : %d\n",
