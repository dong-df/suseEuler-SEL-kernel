From 1968b500413f789f42ed8a3898c9e59687d8e03a Mon Sep 17 00:00:00 2001
From: Yanan Wang <wangyanan55@huawei.com>
Date: Wed, 7 Dec 2022 18:37:54 +0800
Subject: [PATCH] KVM: arm64: Only probe Hisi ncsnp feature on Hisi CPUs
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 1968b500413f789f42ed8a3898c9e59687d8e03a
Modified-by-SEL: No


virt inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I5WHHV
CVE: NA

----------------------------------------------------

The "ncsnp" is an implementation specific CPU virtualization
feature on Hisi 1620 series CPUs. This feature works just
like ARM standard S2FWB to reduce some cache management
operations in virtualization.

Given that it's Hisi specific feature, let's restrict the
detection only to Hisi CPUs. To realize this:
1) Add a sub-directory `hisilicon/` within arch/arm64/kvm to
hold code for Hisi specific virtualization features.
2) Add a new kconfig option `CONFIG_KVM_HISI_VIRT` for users
to select the whole Hisi specific virtualization features.
3) Add a generic global KVM variable `kvm_ncsnp_support`
which is `false` by default. Only re-initialize it when
we have `CONFIG_KVM_HISI_VIRT` enabled.

Signed-off-by: Yanan Wang <wangyanan55@huawei.com>
Reviewed-by: Zenghui Yu <yuzenghui@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/include/asm/hisi_cpu_model.h |   21 -----
 arch/arm64/include/asm/kvm_host.h       |    3 
 arch/arm64/kvm/Kconfig                  |    1 
 arch/arm64/kvm/Makefile                 |    2 
 arch/arm64/kvm/arm.c                    |   13 ++-
 arch/arm64/kvm/hisi_cpu_model.c         |  117 ------------------------------
 arch/arm64/kvm/hisilicon/Kconfig        |    7 +
 arch/arm64/kvm/hisilicon/Makefile       |    2 
 arch/arm64/kvm/hisilicon/hisi_virt.c    |  124 ++++++++++++++++++++++++++++++++
 arch/arm64/kvm/hisilicon/hisi_virt.h    |   19 ++++
 10 files changed, 165 insertions(+), 144 deletions(-)
 delete mode 100644 arch/arm64/include/asm/hisi_cpu_model.h
 delete mode 100644 arch/arm64/kvm/hisi_cpu_model.c
 create mode 100644 arch/arm64/kvm/hisilicon/Kconfig
 create mode 100644 arch/arm64/kvm/hisilicon/Makefile
 create mode 100644 arch/arm64/kvm/hisilicon/hisi_virt.c
 create mode 100644 arch/arm64/kvm/hisilicon/hisi_virt.h

--- a/arch/arm64/include/asm/hisi_cpu_model.h
+++ /dev/null
@@ -1,21 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
-/*
- * Copyright(c) 2019 Huawei Technologies Co., Ltd
- */
-
-#ifndef __HISI_CPU_MODEL_H__
-#define __HISI_CPU_MODEL_H__
-
-enum hisi_cpu_type {
-	HI_1612,
-	HI_1616,
-	HI_1620,
-	UNKNOWN_HI_TYPE
-};
-
-extern enum hisi_cpu_type hi_cpu_type;
-extern bool kvm_ncsnp_support;
-
-void probe_hisi_cpu_type(void);
-void probe_hisi_ncsnp_support(void);
-#endif /* __HISI_CPU_MODEL_H__ */
--- a/arch/arm64/include/asm/kvm_host.h
+++ b/arch/arm64/include/asm/kvm_host.h
@@ -26,7 +26,6 @@
 #include <asm/kvm.h>
 #include <asm/kvm_asm.h>
 #include <asm/thread_info.h>
-#include <asm/hisi_cpu_model.h>
 
 #define __KVM_HAVE_ARCH_INTC_INITIALIZED
 
@@ -715,4 +714,6 @@ extern unsigned int twedel;
 #define use_twed() (false)
 #endif
 
+extern bool kvm_ncsnp_support;
+
 #endif /* __ARM64_KVM_HOST_H__ */
--- a/arch/arm64/kvm/Kconfig
+++ b/arch/arm64/kvm/Kconfig
@@ -49,6 +49,7 @@ menuconfig KVM
 if KVM
 
 source "virt/kvm/Kconfig"
+source "arch/arm64/kvm/hisilicon/Kconfig"
 
 config KVM_ARM_PMU
 	bool "Virtual Performance Monitoring Unit (PMU) support"
--- a/arch/arm64/kvm/Makefile
+++ b/arch/arm64/kvm/Makefile
@@ -17,7 +17,6 @@ kvm-y := $(KVM)/kvm_main.o $(KVM)/coales
 	 guest.o debug.o reset.o sys_regs.o \
 	 vgic-sys-reg-v3.o fpsimd.o pmu.o \
 	 aarch32.o arch_timer.o trng.o \
-	 hisi_cpu_model.o \
 	 vgic/vgic.o vgic/vgic-init.o \
 	 vgic/vgic-irqfd.o vgic/vgic-v2.o \
 	 vgic/vgic-v3.o vgic/vgic-v4.o \
@@ -26,3 +25,4 @@ kvm-y := $(KVM)/kvm_main.o $(KVM)/coales
 	 vgic/vgic-its.o vgic/vgic-debug.o
 
 kvm-$(CONFIG_KVM_ARM_PMU)  += pmu-emul.o
+obj-$(CONFIG_KVM_HISI_VIRT) += hisilicon/
--- a/arch/arm64/kvm/arm.c
+++ b/arch/arm64/kvm/arm.c
@@ -47,6 +47,10 @@
 __asm__(".arch_extension	virt");
 #endif
 
+#ifdef CONFIG_KVM_HISI_VIRT
+#include "hisilicon/hisi_virt.h"
+#endif
+
 DECLARE_KVM_HYP_PER_CPU(unsigned long, kvm_hyp_vector);
 
 static DEFINE_PER_CPU(unsigned long, kvm_arm_hyp_stack_page);
@@ -59,8 +63,7 @@ static DEFINE_SPINLOCK(kvm_vmid_lock);
 
 static bool vgic_present;
 
-/* Hisi cpu type enum */
-enum hisi_cpu_type hi_cpu_type = UNKNOWN_HI_TYPE;
+/* Capability of non-cacheable snooping */
 bool kvm_ncsnp_support;
 
 static DEFINE_PER_CPU(unsigned char, kvm_arm_hardware_enabled);
@@ -1859,9 +1862,11 @@ int kvm_arch_init(void *opaque)
 		return -ENODEV;
 	}
 
-	/* Probe the Hisi CPU type */
+#ifdef CONFIG_KVM_HISI_VIRT
 	probe_hisi_cpu_type();
-	probe_hisi_ncsnp_support();
+	kvm_ncsnp_support = hisi_ncsnp_supported();
+#endif
+	kvm_info("KVM ncsnp %s\n", kvm_ncsnp_support ? "enabled" : "disabled");
 
 	in_hyp_mode = is_kernel_in_hyp_mode();
 
--- a/arch/arm64/kvm/hisi_cpu_model.c
+++ /dev/null
@@ -1,117 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
-/*
- * Copyright(c) 2019 Huawei Technologies Co., Ltd
- */
-
-#include <linux/acpi.h>
-#include <linux/of.h>
-#include <linux/init.h>
-#include <linux/kvm_host.h>
-
-#ifdef CONFIG_ACPI
-
-/* ACPI Hisi oem table id str */
-const char *oem_str[] = {
-	"HIP06",	/* Hisi 1612 */
-	"HIP07",	/* Hisi 1616 */
-	"HIP08"		/* Hisi 1620 */
-};
-
-/*
- * Get Hisi oem table id.
- */
-static void acpi_get_hw_cpu_type(void)
-{
-	struct acpi_table_header *table;
-	acpi_status status;
-	int i, str_size = ARRAY_SIZE(oem_str);
-
-	/* Get oem table id from ACPI table header */
-	status = acpi_get_table(ACPI_SIG_DSDT, 0, &table);
-	if (ACPI_FAILURE(status)) {
-		pr_err("Failed to get ACPI table: %s\n",
-		       acpi_format_exception(status));
-		return;
-	}
-
-	for (i = 0; i < str_size; ++i) {
-		if (!strncmp(oem_str[i], table->oem_table_id, 5)) {
-			hi_cpu_type = i;
-			return;
-		}
-	}
-}
-
-#else
-static void acpi_get_hw_cpu_type(void) {}
-#endif
-
-/* of Hisi cpu model str */
-const char *of_model_str[] = {
-	"Hi1612",
-	"Hi1616"
-};
-
-static void of_get_hw_cpu_type(void)
-{
-	const char *cpu_type;
-	int ret, i, str_size = ARRAY_SIZE(of_model_str);
-
-	ret = of_property_read_string(of_root, "model", &cpu_type);
-	if (ret < 0) {
-		pr_err("Failed to get Hisi cpu model by OF.\n");
-		return;
-	}
-
-	for (i = 0; i < str_size; ++i) {
-		if (strstr(cpu_type, of_model_str[i])) {
-			hi_cpu_type = i;
-			return;
-		}
-	}
-}
-
-void probe_hisi_cpu_type(void)
-{
-	if (!acpi_disabled)
-		acpi_get_hw_cpu_type();
-	else
-		of_get_hw_cpu_type();
-
-	if (hi_cpu_type == UNKNOWN_HI_TYPE)
-		pr_warn("UNKNOWN Hisi cpu type.\n");
-}
-
-#define NCSNP_MMIO_BASE	0x20107E238
-
-/*
- * We have the fantastic HHA ncsnp capability on Kunpeng 920,
- * with which hypervisor doesn't need to perform a lot of cache
- * maintenance like before (in case the guest has non-cacheable
- * Stage-1 mappings).
- */
-void probe_hisi_ncsnp_support(void)
-{
-	void __iomem *base;
-	unsigned int high;
-
-	kvm_ncsnp_support = false;
-
-	if (hi_cpu_type != HI_1620)
-		goto out;
-
-	base = ioremap(NCSNP_MMIO_BASE, 4);
-	if (!base) {
-		pr_err("Unable to map MMIO region when probing ncsnp!\n");
-		goto out;
-	}
-
-	high = readl_relaxed(base) >> 28;
-	iounmap(base);
-	if (high != 0x1)
-		kvm_ncsnp_support = true;
-
-out:
-	kvm_info("Hisi ncsnp: %s\n", kvm_ncsnp_support ? "enabled" :
-							 "disabled");
-}
--- /dev/null
+++ b/arch/arm64/kvm/hisilicon/Kconfig
@@ -0,0 +1,7 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config KVM_HISI_VIRT
+	bool "HiSilicon SoC specific virtualization features"
+	depends on ARCH_HISI
+	help
+	  Support for HiSilicon SoC specific virtualization features.
+	  On non-HiSilicon platforms, say N here.
--- /dev/null
+++ b/arch/arm64/kvm/hisilicon/Makefile
@@ -0,0 +1,2 @@
+# SPDX-License-Identifier: GPL-2.0-only
+obj-$(CONFIG_KVM_HISI_VIRT) += hisi_virt.o
--- /dev/null
+++ b/arch/arm64/kvm/hisilicon/hisi_virt.c
@@ -0,0 +1,124 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright(c) 2022 Huawei Technologies Co., Ltd
+ */
+
+#include <linux/acpi.h>
+#include <linux/of.h>
+#include <linux/init.h>
+#include <linux/kvm_host.h>
+#include "hisi_virt.h"
+
+static enum hisi_cpu_type cpu_type = UNKNOWN_HI_TYPE;
+
+static const char * const hisi_cpu_type_str[] = {
+	"Hisi1612",
+	"Hisi1616",
+	"Hisi1620",
+	"Unknown"
+};
+
+/* ACPI Hisi oem table id str */
+static const char * const oem_str[] = {
+	"HIP06",	/* Hisi 1612 */
+	"HIP07",	/* Hisi 1616 */
+	"HIP08"		/* Hisi 1620 */
+};
+
+/*
+ * Probe Hisi CPU type form ACPI.
+ */
+static enum hisi_cpu_type acpi_get_hisi_cpu_type(void)
+{
+	struct acpi_table_header *table;
+	acpi_status status;
+	int i, str_size = ARRAY_SIZE(oem_str);
+
+	/* Get oem table id from ACPI table header */
+	status = acpi_get_table(ACPI_SIG_DSDT, 0, &table);
+	if (ACPI_FAILURE(status)) {
+		pr_warn("Failed to get ACPI table: %s\n",
+			acpi_format_exception(status));
+		return UNKNOWN_HI_TYPE;
+	}
+
+	for (i = 0; i < str_size; ++i) {
+		if (!strncmp(oem_str[i], table->oem_table_id, 5))
+			return i;
+	}
+
+	return UNKNOWN_HI_TYPE;
+}
+
+/* of Hisi cpu model str */
+static const char * const of_model_str[] = {
+	"Hi1612",
+	"Hi1616"
+};
+
+/*
+ * Probe Hisi CPU type from DT.
+ */
+static enum hisi_cpu_type of_get_hisi_cpu_type(void)
+{
+	const char *model;
+	int ret, i, str_size = ARRAY_SIZE(of_model_str);
+
+	/*
+	 * Note: There may not be a "model" node in FDT, which
+	 * is provided by the vendor. In this case, we are not
+	 * able to get CPU type information through this way.
+	 */
+	ret = of_property_read_string(of_root, "model", &model);
+	if (ret < 0) {
+		pr_warn("Failed to get Hisi cpu model by OF.\n");
+		return UNKNOWN_HI_TYPE;
+	}
+
+	for (i = 0; i < str_size; ++i) {
+		if (strstr(model, of_model_str[i]))
+			return i;
+	}
+
+	return UNKNOWN_HI_TYPE;
+}
+
+void probe_hisi_cpu_type(void)
+{
+	if (!acpi_disabled)
+		cpu_type = acpi_get_hisi_cpu_type();
+	else
+		cpu_type = of_get_hisi_cpu_type();
+
+	kvm_info("detected: Hisi CPU type '%s'\n", hisi_cpu_type_str[cpu_type]);
+}
+
+/*
+ * We have the fantastic HHA ncsnp capability on Kunpeng 920,
+ * with which hypervisor doesn't need to perform a lot of cache
+ * maintenance like before (in case the guest has non-cacheable
+ * Stage-1 mappings).
+ */
+#define NCSNP_MMIO_BASE	0x20107E238
+bool hisi_ncsnp_supported(void)
+{
+	void __iomem *base;
+	unsigned int high;
+	bool supported = false;
+
+	if (cpu_type != HI_1620)
+		return supported;
+
+	base = ioremap(NCSNP_MMIO_BASE, 4);
+	if (!base) {
+		pr_warn("Unable to map MMIO region when probing ncsnp!\n");
+		return supported;
+	}
+
+	high = readl_relaxed(base) >> 28;
+	iounmap(base);
+	if (high != 0x1)
+		supported = true;
+
+	return supported;
+}
--- /dev/null
+++ b/arch/arm64/kvm/hisilicon/hisi_virt.h
@@ -0,0 +1,19 @@
+// SPDX-License-Identifier: GPL-2.0-or-later
+/*
+ * Copyright(c) 2022 Huawei Technologies Co., Ltd
+ */
+
+#ifndef __HISI_VIRT_H__
+#define __HISI_VIRT_H__
+
+enum hisi_cpu_type {
+	HI_1612,
+	HI_1616,
+	HI_1620,
+	UNKNOWN_HI_TYPE
+};
+
+void probe_hisi_cpu_type(void);
+bool hisi_ncsnp_supported(void);
+
+#endif /* __HISI_VIRT_H__ */
