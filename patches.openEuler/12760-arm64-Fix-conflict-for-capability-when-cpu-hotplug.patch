From edaf6cd4d259adf510a6bddb643fbf468dd9a9ec Mon Sep 17 00:00:00 2001
From: Weilong Chen <chenweilong@huawei.com>
Date: Fri, 7 Jan 2022 23:05:29 +0800
Subject: [PATCH] arm64: Fix conflict for capability when cpu hotplug
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: edaf6cd4d259adf510a6bddb643fbf468dd9a9ec


hulk inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I4LGV4
CVE: NA

---------------------------

Patch "cache: Workaround HiSilicon Taishan DC CVAU" breaks the verifiy
of cpu capability when hot plug cpus. It set the system scope on but
local cpu capability still off.
This path fix it by two step:
1. Unset CTR_IDC_SHIFT bit from strict_mask to skip check.
2. Special treatment in read_cpuid_effective_cachetype

Signed-off-by: Weilong Chen <chenweilong@huawei.com>
Reviewed-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/include/asm/cache.h | 9 +++++++++
 arch/arm64/kernel/cpu_errata.c | 1 +
 2 files changed, 10 insertions(+)

diff --git a/arch/arm64/include/asm/cache.h b/arch/arm64/include/asm/cache.h
index 63d43b5f82f6..cf8e78585865 100644
--- a/arch/arm64/include/asm/cache.h
+++ b/arch/arm64/include/asm/cache.h
@@ -110,6 +110,15 @@ int cache_line_size(void);
 static inline u32 __attribute_const__ read_cpuid_effective_cachetype(void)
 {
 	u32 ctr = read_cpuid_cachetype();
+#ifdef CONFIG_HISILICON_ERRATUM_1980005
+	static const struct midr_range idc_support_list[] = {
+		MIDR_ALL_VERSIONS(MIDR_HISI_TSV110),
+		MIDR_REV(MIDR_HISI_TSV200, 1, 0),
+		{ /* sentinel */ }
+	};
+	if (is_midr_in_range_list(read_cpuid_id(), idc_support_list))
+		ctr |= BIT(CTR_IDC_SHIFT);
+#endif
 
 	if (!(ctr & BIT(CTR_IDC_SHIFT))) {
 		u64 clidr = read_sysreg(clidr_el1);
diff --git a/arch/arm64/kernel/cpu_errata.c b/arch/arm64/kernel/cpu_errata.c
index abb6c903abef..f78ce1e6dfa4 100644
--- a/arch/arm64/kernel/cpu_errata.c
+++ b/arch/arm64/kernel/cpu_errata.c
@@ -79,6 +79,7 @@ hisilicon_1980005_enable(const struct arm64_cpu_capabilities *__unused)
 {
 	cpus_set_cap(ARM64_HAS_CACHE_IDC);
 	arm64_ftr_reg_ctrel0.sys_val |= BIT(CTR_IDC_SHIFT);
+	arm64_ftr_reg_ctrel0.strict_mask &= ~BIT(CTR_IDC_SHIFT);
 	sysreg_clear_set(sctlr_el1, SCTLR_EL1_UCT, 0);
 }
 #endif
-- 
2.26.2

