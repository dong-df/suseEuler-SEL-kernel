From 0bf143f4043e3572ebc6d583ab3529d2a3af8e97 Mon Sep 17 00:00:00 2001
From: Gu Zitao <guzitao@wxiat.com>
Date: Tue, 7 Jun 2022 17:42:30 +0800
Subject: [PATCH] sw64: fix some compile errors
Patch-mainline: NO, OTHERS
References: openEuler-22.03-LTS
Modified-by-SEL: No


Sunway inclusion
category: bugfix
bugzilla: https://gitee.com/openeuler/kernel/issues/I56QAM

--------------------------------

This patch fixes compile errors for CONFIG_KGDB=y, CONFIG_KEXEC=y and
CONFIG_MEMORY_HOTPLUG=y.

These compile errors are caused by kernel version upgrade. The related
codes have changed. Now fix them according to upstream.

Signed-off-by: Gu Zitao <guzitao@wxiat.com>

Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Signed-off-by: Gu Zitao <guzitao@wxiat.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/sw_64/kernel/kgdb.c  | 6 +++---
 arch/sw_64/kernel/setup.c | 3 ++-
 arch/sw_64/mm/init.c      | 5 ++---
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/arch/sw_64/kernel/kgdb.c b/arch/sw_64/kernel/kgdb.c
index 09e9ca7a0303..491f287eede9 100644
--- a/arch/sw_64/kernel/kgdb.c
+++ b/arch/sw_64/kernel/kgdb.c
@@ -139,12 +139,12 @@ void kgdb_arch_set_pc(struct pt_regs *regs, unsigned long pc)
 	pr_info("AFTER SET PC IS %lx\n", instruction_pointer(regs));
 }
 
-static void kgdb_call_nmi_hook(void *ignored)
+void kgdb_call_nmi_hook(void *ignored)
 {
 	kgdb_nmicallback(raw_smp_processor_id(), NULL);
 }
 
-void kgdb_roundup_cpus(unsigned long flags)
+void kgdb_roundup_cpus(void)
 {
 	local_irq_enable();
 	smp_call_function(kgdb_call_nmi_hook, NULL, 0);
@@ -228,6 +228,6 @@ void kgdb_arch_exit(void)
  * sw64 instructions are always in LE.
  * Break instruction is encoded in LE format
  */
-struct kgdb_arch arch_kgdb_ops = {
+const struct kgdb_arch arch_kgdb_ops = {
 	.gdb_bpt_instr = {0x80, 00, 00, 00}
 };
diff --git a/arch/sw_64/kernel/setup.c b/arch/sw_64/kernel/setup.c
index 2de954a3c086..67d01f8cfe22 100644
--- a/arch/sw_64/kernel/setup.c
+++ b/arch/sw_64/kernel/setup.c
@@ -147,7 +147,8 @@ static void __init kexec_control_page_init(void)
 {
 	phys_addr_t addr;
 
-	addr = memblock_alloc_base(KEXEC_CONTROL_PAGE_SIZE, PAGE_SIZE, KTEXT_MAX);
+	addr = memblock_phys_alloc_range(KEXEC_CONTROL_PAGE_SIZE, PAGE_SIZE,
+					0, KTEXT_MAX);
 	kexec_control_page = (void *)(__START_KERNEL_map + addr);
 }
 
diff --git a/arch/sw_64/mm/init.c b/arch/sw_64/mm/init.c
index 4dda5ecb4f2e..7fcd3d834ba5 100644
--- a/arch/sw_64/mm/init.c
+++ b/arch/sw_64/mm/init.c
@@ -312,14 +312,13 @@ void __init early_init_dt_add_memory_arch(u64 base, u64 size)
 #endif
 
 #ifdef CONFIG_MEMORY_HOTPLUG
-int arch_add_memory(int nid, u64 start, u64 size, struct vmem_altmap *altmap,
-		bool want_memblock)
+int arch_add_memory(int nid, u64 start, u64 size, struct mhp_params *params)
 {
 	unsigned long start_pfn = start >> PAGE_SHIFT;
 	unsigned long nr_pages = size >> PAGE_SHIFT;
 	int ret;
 
-	ret = __add_pages(nid, start_pfn, nr_pages, altmap, want_memblock);
+	ret = __add_pages(nid, start_pfn, nr_pages, params);
 	if (ret)
 		printk("%s: Problem encountered in __add_pages() as ret=%d\n",
 		       __func__,  ret);
-- 
2.34.1

