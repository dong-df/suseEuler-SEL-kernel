From 75ac7be96da43f12bad247de69137500e02fd37f Mon Sep 17 00:00:00 2001
From: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date: Sat, 20 Feb 2021 11:01:00 +0800
Subject: [PATCH] sdei_watchdog: clear EOI of the secure timer before kdump
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 75ac7be96da43f12bad247de69137500e02fd37f
Modified-by-SEL: Yes, modified due to different context


hulk inclusion
category: feature
bugzilla: 48046
CVE: NA

-------------------------------------------------------------------------

When we panic in hardlockup, the secure timer interrupt remains activate
because firmware clear eoi after dispatch is completed. This will cause
arm_arch_timer interrupt failed to trigger in the second kernel.

This patch add a new SMC helper to clear eoi of a certain interrupt and
clear eoi of the secure timer before booting the second kernel.

Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Reviewed-by: Hanjun Guo <guohanjun@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/kernel/machine_kexec.c |   10 ++++++++++
 arch/arm64/kernel/watchdog_sdei.c |    6 ++++++
 drivers/firmware/arm_sdei.c       |    6 ++++++
 include/linux/arm_sdei.h          |    1 +
 include/linux/nmi.h               |    6 ++++++
 include/uapi/linux/arm_sdei.h     |    1 +
 6 files changed, 30 insertions(+)

--- a/arch/arm64/kernel/machine_kexec.c
+++ b/arch/arm64/kernel/machine_kexec.c
@@ -10,6 +10,7 @@
 #include <linux/irq.h>
 #include <linux/kernel.h>
 #include <linux/kexec.h>
+#include <linux/nmi.h>
 #include <linux/page-flags.h>
 #include <linux/set_memory.h>
 #include <linux/smp.h>
@@ -255,6 +256,15 @@ void machine_crash_shutdown(struct pt_re
 	/* shutdown non-crashing cpus */
 	crash_smp_send_stop();
 
+	/*
+	 * when we panic in hardlockup detected by sdei_watchdog, the secure
+	 * timer interrupt remains activate here because firmware clear eoi
+	 * after dispatch is completed. This will cause arm_arch_timer
+	 * interrupt failed to trigger in the second kernel. So we clear eoi
+	 * of the secure timer before booting the second kernel.
+	 */
+	sdei_watchdog_clear_eoi();
+
 	/* for crashing cpu */
 	crash_save_cpu(regs, smp_processor_id());
 	machine_kexec_mask_interrupts();
--- a/arch/arm64/kernel/watchdog_sdei.c
+++ b/arch/arm64/kernel/watchdog_sdei.c
@@ -80,6 +80,12 @@ static int __init disable_sdei_nmi_watch
 }
 __setup("disable_sdei_nmi_watchdog", disable_sdei_nmi_watchdog_setup);
 
+void sdei_watchdog_clear_eoi(void)
+{
+	if (sdei_watchdog_registered)
+		sdei_api_clear_eoi(SDEI_NMI_WATCHDOG_HWIRQ);
+}
+
 int __init watchdog_nmi_probe(void)
 {
 	int ret;
--- a/drivers/firmware/arm_sdei.c
+++ b/drivers/firmware/arm_sdei.c
@@ -196,6 +196,12 @@ int sdei_api_event_interrupt_bind(int hw
 	return (int)event_number;
 }
 
+int sdei_api_clear_eoi(int hwirq)
+{
+	return invoke_sdei_fn(SDEI_1_0_FN_SDEI_CLEAR_EOI, hwirq, 0, 0, 0, 0,
+			NULL);
+}
+
 static int sdei_api_event_get_info(u32 event, u32 info, u64 *result)
 {
 	return invoke_sdei_fn(SDEI_1_0_FN_SDEI_EVENT_GET_INFO, event, info, 0,
--- a/include/linux/arm_sdei.h
+++ b/include/linux/arm_sdei.h
@@ -39,6 +39,7 @@ int sdei_event_disable(u32 event_num);
 int sdei_api_event_interrupt_bind(int hwirq);
 int sdei_api_event_disable(u32 event_num);
 int sdei_api_event_enable(u32 event_num);
+int sdei_api_clear_eoi(int hwirq);
 
 /* GHES register/unregister helpers */
 int sdei_register_ghes(struct ghes *ghes, sdei_event_callback *normal_cb,
--- a/include/linux/nmi.h
+++ b/include/linux/nmi.h
@@ -224,4 +224,10 @@ int proc_watchdog_cpumask(struct ctl_tab
 #include <asm/nmi.h>
 #endif
 
+#ifdef CONFIG_SDEI_WATCHDOG
+void sdei_watchdog_clear_eoi(void);
+#else
+static inline void sdei_watchdog_clear_eoi(void) { }
+#endif
+
 #endif
--- a/include/uapi/linux/arm_sdei.h
+++ b/include/uapi/linux/arm_sdei.h
@@ -24,6 +24,7 @@
 #define SDEI_1_0_FN_SDEI_INTERRUPT_RELEASE		SDEI_1_0_FN(0x0E)
 #define SDEI_1_0_FN_SDEI_PRIVATE_RESET			SDEI_1_0_FN(0x11)
 #define SDEI_1_0_FN_SDEI_SHARED_RESET			SDEI_1_0_FN(0x12)
+#define SDEI_1_0_FN_SDEI_CLEAR_EOI			SDEI_1_0_FN(0x18)
 
 #define SDEI_VERSION_MAJOR_SHIFT			48
 #define SDEI_VERSION_MAJOR_MASK				0x7fff
