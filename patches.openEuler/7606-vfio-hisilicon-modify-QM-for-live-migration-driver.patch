From cf8167eca399a31f5304ddaf32d15a0d967732c2 Mon Sep 17 00:00:00 2001
From: Longfang Liu <liulongfang@huawei.com>
Date: Sat, 4 Sep 2021 17:22:46 +0800
Subject: [PATCH] vfio/hisilicon: modify QM for live migration driver
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: cf8167eca399a31f5304ddaf32d15a0d967732c2
Modified-by-SEL: Yes, refreshed due to different context


driver inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I473Q4?from=project-issue

----------------------------------------------------------------------

Add device status recording function for accelerator live migration driver.

Signed-off-by: Longfang Liu <liulongfang@huawei.com>
Reviewed-by: Hao Fang <fanghao11@huawei.com>
Reviewed-by: Mingqiang Ling <lingmingqiang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/crypto/hisilicon/qm.c |   15 +++++++++++++++
 drivers/crypto/hisilicon/qm.h |    7 +++++++
 2 files changed, 22 insertions(+)

--- a/drivers/crypto/hisilicon/qm.c
+++ b/drivers/crypto/hisilicon/qm.c
@@ -3306,6 +3306,13 @@ static int hisi_qp_memory_init(struct hi
 	return 0;
 }
 
+static void hisi_qm_set_state(struct hisi_qm *qm, enum vf_state state)
+{
+	/* set vf driver state */
+	if (qm->ver > QM_HW_V2)
+		writel(state, qm->io_base + QM_VF_STATE);
+}
+
 static void hisi_qm_pre_init(struct hisi_qm *qm)
 {
 	struct pci_dev *pdev = qm->pdev;
@@ -3406,6 +3413,8 @@ void hisi_qm_uninit(struct hisi_qm *qm)
 	}
 	up_write(&qm->qps_lock);
 
+	hisi_qm_set_state(qm, VF_NOT_READY);
+
 	qm_irq_unregister(qm);
 	hisi_qm_pci_uninit(qm);
 	if (qm->use_sva) {
@@ -3615,6 +3624,8 @@ int hisi_qm_start(struct hisi_qm *qm)
 	if (!ret)
 		atomic_set(&qm->status.flags, QM_START);
 
+	hisi_qm_set_state(qm, VF_READY);
+
 err_unlock:
 	up_write(&qm->qps_lock);
 	return ret;
@@ -3709,6 +3720,8 @@ int hisi_qm_stop(struct hisi_qm *qm, enu
 	struct device *dev = &qm->pdev->dev;
 	int ret = 0;
 
+	hisi_qm_set_state(qm, VF_PREPARE);
+
 	down_write(&qm->qps_lock);
 
 	qm->status.stop_reason = r;
@@ -5643,6 +5656,8 @@ static int hisi_qm_pci_init(struct hisi_
 		goto err_get_pci_res;
 	pci_set_master(pdev);
 
+	hisi_qm_set_state(qm, VF_PREPARE);
+
 	if (!qm->ops->get_irq_num) {
 		ret = -EOPNOTSUPP;
 		goto err_get_pci_res;
--- a/drivers/crypto/hisilicon/qm.h
+++ b/drivers/crypto/hisilicon/qm.h
@@ -80,6 +80,7 @@
 #define QM_SHAPER_CFG			0x100164
 #define QM_SHAPER_ENABLE		BIT(30)
 #define QM_SHAPER_TYPE1_OFFSET		10
+#define QM_VF_STATE			0x0060
 
 /* page number for queue file region */
 #define QM_DOORBELL_PAGE_NR		1
@@ -109,6 +110,12 @@ enum qp_state {
 	QP_CLOSE,
 };
 
+enum vf_state {
+	VF_READY = 0x0,
+	VF_NOT_READY,
+	VF_PREPARE,
+};
+
 enum qm_hw_ver {
 	QM_HW_UNKNOWN = -1,
 	QM_HW_V1 = 0x20,
