From: Kai Liu <kai.liu@suse.com>
Date: Wed, 1 Dec 2021 11:40:34 +0800
Subject: Fix ima_digest_list.c compilation error
Patch-mainline: Never, fix difference between openEuler and mainline code
openEuler-commit: d16f801d191621e93ba1555fe0183f0904f4e9a4
References: bsn#22

This patch fixes below compilation error:

  CC      security/integrity/ima/ima_digest_list.o
security/integrity/ima/ima_digest_list.c: In function ‘load_digest_list’:
security/integrity/ima/ima_digest_list.c:355:24: error: passing argument 1 of ‘file_open_root’ from incompatible pointer type [-Werror=incompatible-pointer-types]
  file = file_open_root(dir->dentry, dir->mnt, name, O_RDONLY, 0);
                        ^~~
In file included from ./include/linux/namei.h:5:0,
                 from security/integrity/ima/ima_digest_list.c:23:
./include/linux/fs.h:2534:21: note: expected ‘const struct path *’ but argument is of type ‘struct dentry *’
 extern struct file *file_open_root(const struct path *,
                     ^~~~~~~~~~~~~~
security/integrity/ima/ima_digest_list.c:355:37: error: passing argument 2 of ‘file_open_root’ from incompatible pointer type [-Werror=incompatible-pointer-types]
  file = file_open_root(dir->dentry, dir->mnt, name, O_RDONLY, 0);
                                     ^~~
In file included from ./include/linux/namei.h:5:0,
                 from security/integrity/ima/ima_digest_list.c:23:
./include/linux/fs.h:2534:21: note: expected ‘const char *’ but argument is of type ‘struct vfsmount *’
 extern struct file *file_open_root(const struct path *,
                     ^~~~~~~~~~~~~~
security/integrity/ima/ima_digest_list.c:355:47: warning: passing argument 3 of ‘file_open_root’ makes integer from pointer without a cast [-Wint-conversion]
  file = file_open_root(dir->dentry, dir->mnt, name, O_RDONLY, 0);
                                               ^~~~
In file included from ./include/linux/namei.h:5:0,
                 from security/integrity/ima/ima_digest_list.c:23:
./include/linux/fs.h:2534:21: note: expected ‘int’ but argument is of type ‘const char *’
 extern struct file *file_open_root(const struct path *,
                     ^~~~~~~~~~~~~~
security/integrity/ima/ima_digest_list.c:355:9: error: too many arguments to function ‘file_open_root’
  file = file_open_root(dir->dentry, dir->mnt, name, O_RDONLY, 0);
         ^~~~~~~~~~~~~~
In file included from ./include/linux/namei.h:5:0,
                 from security/integrity/ima/ima_digest_list.c:23:
./include/linux/fs.h:2534:21: note: declared here
 extern struct file *file_open_root(const struct path *,
                     ^~~~~~~~~~~~~~
cc1: some warnings being treated as errors
make[3]: *** [scripts/Makefile.build:280: security/integrity/ima/ima_digest_list.o] Error 1
make[2]: *** [scripts/Makefile.build:497: security/integrity/ima] Error 2
make[1]: *** [scripts/Makefile.build:497: security/integrity] Error 2
make: *** [Makefile:1822: security] Error 2

openEuler ported mainline commit:
  ffb37ca3bd16 switch file_open_root() to struct path
as 
  d16f801d1916 switch file_open_root() to struct path

and squashed a change for ima_digest_list.c without submitting a separate 
commit.

Signed-off-by: Kai Liu <kai.liu@suse.com>
---
 security/integrity/ima/ima_digest_list.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/security/integrity/ima/ima_digest_list.c
+++ b/security/integrity/ima/ima_digest_list.c
@@ -352,7 +352,7 @@ static int __init load_digest_list(struc
 			goto out;
 	}
 
-	file = file_open_root(dir->dentry, dir->mnt, name, O_RDONLY, 0);
+	file = file_open_root(dir, name, O_RDONLY, 0);
 	if (IS_ERR(file)) {
 		pr_err("Unable to open file: %s (%ld)", name, PTR_ERR(file));
 		goto out;
