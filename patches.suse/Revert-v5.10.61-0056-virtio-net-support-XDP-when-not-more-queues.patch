From d90d8bfa59ece468252e68d2a034de5165727a43 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <guoqing.jiang@suse.com>
Date: Sat, 7 May 2022 15:37:08 +0800
Subject: [PATCH] Revert "virtio-net: support XDP when not more queues"
Patch-mainline: Never, revert stable patch which is added again in sorted section
References: bsn#198
Modified-by-SEL: No


This reverts commit b7adfde949307efaeef0f32ca28273f6499c7c1d.

Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/net/virtio_net.c | 62 +++++++++-------------------------------
 1 file changed, 13 insertions(+), 49 deletions(-)

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index a47cf77a0b08..7d1f609306f9 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -195,9 +195,6 @@ struct virtnet_info {
 	/* # of XDP queue pairs currently used by the driver */
 	u16 xdp_queue_pairs;
 
-	/* xdp_queue_pairs may be 0, when xdp is already loaded. So add this. */
-	bool xdp_enabled;
-
 	/* I like... big packets and I cannot lie! */
 	bool big_packets;
 
@@ -488,41 +485,12 @@ static int __virtnet_xdp_xmit_one(struct virtnet_info *vi,
 	return 0;
 }
 
-/* when vi->curr_queue_pairs > nr_cpu_ids, the txq/sq is only used for xdp tx on
- * the current cpu, so it does not need to be locked.
- *
- * Here we use marco instead of inline functions because we have to deal with
- * three issues at the same time: 1. the choice of sq. 2. judge and execute the
- * lock/unlock of txq 3. make sparse happy. It is difficult for two inline
- * functions to perfectly solve these three problems at the same time.
- */
-#define virtnet_xdp_get_sq(vi) ({                                       \
-	struct netdev_queue *txq;                                       \
-	typeof(vi) v = (vi);                                            \
-	unsigned int qp;                                                \
-									\
-	if (v->curr_queue_pairs > nr_cpu_ids) {                         \
-		qp = v->curr_queue_pairs - v->xdp_queue_pairs;          \
-		qp += smp_processor_id();                               \
-		txq = netdev_get_tx_queue(v->dev, qp);                  \
-		__netif_tx_acquire(txq);                                \
-	} else {                                                        \
-		qp = smp_processor_id() % v->curr_queue_pairs;          \
-		txq = netdev_get_tx_queue(v->dev, qp);                  \
-		__netif_tx_lock(txq, raw_smp_processor_id());           \
-	}                                                               \
-	v->sq + qp;                                                     \
-})
-
-#define virtnet_xdp_put_sq(vi, q) {                                     \
-	struct netdev_queue *txq;                                       \
-	typeof(vi) v = (vi);                                            \
-									\
-	txq = netdev_get_tx_queue(v->dev, (q) - v->sq);                 \
-	if (v->curr_queue_pairs > nr_cpu_ids)                           \
-		__netif_tx_release(txq);                                \
-	else                                                            \
-		__netif_tx_unlock(txq);                                 \
+static struct send_queue *virtnet_xdp_sq(struct virtnet_info *vi)
+{
+	unsigned int qp;
+
+	qp = vi->curr_queue_pairs - vi->xdp_queue_pairs + smp_processor_id();
+	return &vi->sq[qp];
 }
 
 static int virtnet_xdp_xmit(struct net_device *dev,
@@ -548,7 +516,7 @@ static int virtnet_xdp_xmit(struct net_device *dev,
 	if (!xdp_prog)
 		return -ENXIO;
 
-	sq = virtnet_xdp_get_sq(vi);
+	sq = virtnet_xdp_sq(vi);
 
 	if (unlikely(flags & ~XDP_XMIT_FLAGS_MASK)) {
 		ret = -EINVAL;
@@ -596,13 +564,12 @@ static int virtnet_xdp_xmit(struct net_device *dev,
 	sq->stats.kicks += kicks;
 	u64_stats_update_end(&sq->stats.syncp);
 
-	virtnet_xdp_put_sq(vi, sq);
 	return ret;
 }
 
 static unsigned int virtnet_get_headroom(struct virtnet_info *vi)
 {
-	return vi->xdp_enabled ? VIRTIO_XDP_HEADROOM : 0;
+	return vi->xdp_queue_pairs ? VIRTIO_XDP_HEADROOM : 0;
 }
 
 /* We copy the packet for XDP in the following cases:
@@ -1506,13 +1473,12 @@ static int virtnet_poll(struct napi_struct *napi, int budget)
 		xdp_do_flush();
 
 	if (xdp_xmit & VIRTIO_XDP_TX) {
-		sq = virtnet_xdp_get_sq(vi);
+		sq = virtnet_xdp_sq(vi);
 		if (virtqueue_kick_prepare(sq->vq) && virtqueue_notify(sq->vq)) {
 			u64_stats_update_begin(&sq->stats.syncp);
 			sq->stats.kicks++;
 			u64_stats_update_end(&sq->stats.syncp);
 		}
-		virtnet_xdp_put_sq(vi, sq);
 	}
 
 	return received;
@@ -2487,9 +2453,10 @@ static int virtnet_xdp_set(struct net_device *dev, struct bpf_prog *prog,
 
 	/* XDP requires extra queues for XDP_TX */
 	if (curr_qp + xdp_qp > vi->max_queue_pairs) {
-		netdev_warn(dev, "XDP request %i queues but max is %i. XDP_TX and XDP_REDIRECT will operate in a slower locked tx mode.\n",
+		NL_SET_ERR_MSG_MOD(extack, "Too few free TX rings available");
+		netdev_warn(dev, "request %i queues but max is %i\n",
 			    curr_qp + xdp_qp, vi->max_queue_pairs);
-		xdp_qp = 0;
+		return -ENOMEM;
 	}
 
 	old_prog = rtnl_dereference(vi->rq[0].xdp_prog);
@@ -2523,14 +2490,11 @@ static int virtnet_xdp_set(struct net_device *dev, struct bpf_prog *prog,
 	vi->xdp_queue_pairs = xdp_qp;
 
 	if (prog) {
-		vi->xdp_enabled = true;
 		for (i = 0; i < vi->max_queue_pairs; i++) {
 			rcu_assign_pointer(vi->rq[i].xdp_prog, prog);
 			if (i == 0 && !old_prog)
 				virtnet_clear_guest_offloads(vi);
 		}
-	} else {
-		vi->xdp_enabled = false;
 	}
 
 	for (i = 0; i < vi->max_queue_pairs; i++) {
@@ -2598,7 +2562,7 @@ static int virtnet_set_features(struct net_device *dev,
 	int err;
 
 	if ((dev->features ^ features) & NETIF_F_LRO) {
-		if (vi->xdp_enabled)
+		if (vi->xdp_queue_pairs)
 			return -EBUSY;
 
 		if (features & NETIF_F_LRO)
-- 
2.34.1

