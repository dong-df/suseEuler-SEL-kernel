Git-commit: 8cfc47fc2eb0fd2d6eaa9e4b23b4bf6ef1bfaeef
Message-Id: <8cfc47fc2eb0fd2d6eaa9e4b23b4bf6ef1bfaeef.1637072445.git.geliang.tang@suse.com>
From: Paolo Abeni <pabeni@redhat.com>
Date: Mon, 21 Jun 2021 15:54:36 -0700
Subject: [PATCH] mptcp: drop redundant test in move_skbs_to_msk()
References: bsn#2
Patch-mainline: v5.14-rc1

Currently we check the msk state to avoid enqueuing new
skbs at msk shutdown time.

Such test is racy - as we can't acquire the msk socket lock -
and useless, as the caller already checked the subflow
field 'disposable', covering the same scenario in a race
free manner - read and updated under the ssk socket lock.

Signed-off-by: Paolo Abeni <pabeni@redhat.com>
Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 net/mptcp/protocol.c | 3 ---
 1 file changed, 3 deletions(-)

--- a/net/mptcp/protocol.c
+++ b/net/mptcp/protocol.c
@@ -686,9 +686,6 @@ static bool move_skbs_to_msk(struct mptc
 	struct sock *sk = (struct sock *)msk;
 	unsigned int moved = 0;
 
-	if (inet_sk_state_load(sk) == TCP_CLOSE)
-		return false;
-
 	__mptcp_move_skbs_from_subflow(msk, ssk, &moved);
 	__mptcp_ofo_queue(msk);
 	if (unlikely(ssk->sk_err)) {
