From bfbf2749ffc5d0e4b1c2ed013f63ecc87b246137 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <guoqing.jiang@suse.com>
Date: Sat, 7 May 2022 15:37:03 +0800
Subject: [PATCH] Revert "virtio_net: Do not pull payload in skb->head"
Patch-mainline: Never, revert stable patch which is added again in sorted section
References: bsn#198
Modified-by-SEL: No


This reverts commit a36703d08c83b1488a2f2922f0dc4263125ccd2d.

Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/net/virtio_net.c   | 10 +++-------
 include/linux/virtio_net.h | 14 +++++---------
 2 files changed, 8 insertions(+), 16 deletions(-)

diff --git a/drivers/net/virtio_net.c b/drivers/net/virtio_net.c
index 286f836a53bf..038ce4e5e84b 100644
--- a/drivers/net/virtio_net.c
+++ b/drivers/net/virtio_net.c
@@ -406,13 +406,9 @@ static struct sk_buff *page_to_skb(struct virtnet_info *vi,
 	offset += hdr_padded_len;
 	p += hdr_padded_len;
 
-	/* Copy all frame if it fits skb->head, otherwise
-	 * we let virtio_net_hdr_to_skb() and GRO pull headers as needed.
-	 */
-	if (len <= skb_tailroom(skb))
-		copy = len;
-	else
-		copy = ETH_HLEN + metasize;
+	copy = len;
+	if (copy > skb_tailroom(skb))
+		copy = skb_tailroom(skb);
 	skb_put_data(skb, p, copy);
 
 	if (metasize) {
diff --git a/include/linux/virtio_net.h b/include/linux/virtio_net.h
index b465f8f3e554..98775d7fa696 100644
--- a/include/linux/virtio_net.h
+++ b/include/linux/virtio_net.h
@@ -65,18 +65,14 @@ static inline int virtio_net_hdr_to_skb(struct sk_buff *skb,
 	skb_reset_mac_header(skb);
 
 	if (hdr->flags & VIRTIO_NET_HDR_F_NEEDS_CSUM) {
-		u32 start = __virtio16_to_cpu(little_endian, hdr->csum_start);
-		u32 off = __virtio16_to_cpu(little_endian, hdr->csum_offset);
-		u32 needed = start + max_t(u32, thlen, off + sizeof(__sum16));
-
-		if (!pskb_may_pull(skb, needed))
-			return -EINVAL;
+		u16 start = __virtio16_to_cpu(little_endian, hdr->csum_start);
+		u16 off = __virtio16_to_cpu(little_endian, hdr->csum_offset);
 
 		if (!skb_partial_csum_set(skb, start, off))
 			return -EINVAL;
 
 		p_off = skb_transport_offset(skb) + thlen;
-		if (!pskb_may_pull(skb, p_off))
+		if (p_off > skb_headlen(skb))
 			return -EINVAL;
 	} else {
 		/* gso packets without NEEDS_CSUM do not set transport_offset.
@@ -106,14 +102,14 @@ static inline int virtio_net_hdr_to_skb(struct sk_buff *skb,
 			}
 
 			p_off = keys.control.thoff + thlen;
-			if (!pskb_may_pull(skb, p_off) ||
+			if (p_off > skb_headlen(skb) ||
 			    keys.basic.ip_proto != ip_proto)
 				return -EINVAL;
 
 			skb_set_transport_header(skb, keys.control.thoff);
 		} else if (gso_type) {
 			p_off = thlen;
-			if (!pskb_may_pull(skb, p_off))
+			if (p_off > skb_headlen(skb))
 				return -EINVAL;
 		}
 	}
-- 
2.34.1

