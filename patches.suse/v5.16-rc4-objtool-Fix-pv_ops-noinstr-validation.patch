From 988f01683c7f2bf9f8fe2bae1cf4010fcd1baaf5 Mon Sep 17 00:00:00 2001
Message-Id: <988f01683c7f2bf9f8fe2bae1cf4010fcd1baaf5.1652325055.git.geliang.tang@suse.com>
From: Peter Zijlstra <peterz@infradead.org>
Date: Thu, 2 Dec 2021 21:45:34 +0100
Subject: [PATCH] objtool: Fix pv_ops noinstr validation
Git-commit: 988f01683c7f2bf9f8fe2bae1cf4010fcd1baaf5
Patch-mainline: v5.16-rc4
References: bsn#258
Modified-by-SEL: Yes, refreshed due to context changes


Boris reported that in one of his randconfig builds, objtool got
infinitely stuck. Turns out there's trivial list corruption in the
pv_ops tracking when a function is both in a static table and in a code
assignment.

Avoid re-adding function to the pv_ops[] lists when they're already on
it.

Fixes: db2b0c5d7b6f ("objtool: Support pv_opsindirect calls for noinstr")
Reported-by: Borislav Petkov <bp@alien8.de>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Signed-off-by: Borislav Petkov <bp@suse.de>
Tested-by: Borislav Petkov <bp@alien8.de>
Link: https://lkml.kernel.org/r/20211202204534.GA16608@worktop.programming.kicks-ass.net
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 tools/objtool/elf.c     | 1 +
 tools/objtool/objtool.c | 4 ++++
 2 files changed, 5 insertions(+)

--- a/tools/objtool/elf.c
+++ b/tools/objtool/elf.c
@@ -377,6 +377,7 @@ static int read_symbols(struct elf *elf)
 			return -1;
 		}
 		memset(sym, 0, sizeof(*sym));
+		INIT_LIST_HEAD(&sym->pv_target);
 
 		sym->idx = i;
 
--- a/tools/objtool/objtool.c
+++ b/tools/objtool/objtool.c
@@ -154,6 +154,10 @@ void objtool_pv_add(struct objtool_file
 	    !strcmp(func->name, "_paravirt_ident_64"))
 		return;
 
+	/* already added this function */
+	if (!list_empty(&func->pv_target))
+		return;
+
 	list_add(&func->pv_target, &f->pv_ops[idx].targets);
 	f->pv_ops[idx].clean = false;
 }
