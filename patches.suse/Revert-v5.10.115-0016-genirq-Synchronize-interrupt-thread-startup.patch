From 0475f0ac783b6b2bee8736db5a3a1111fdcbc083 Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <guoqing.jiang@suse.com>
Date: Thu, 14 Jul 2022 13:53:53 +0800
Subject: [PATCH] Revert "genirq: Synchronize interrupt thread startup"
Patch-mainline: Never, revert stable patch which is added again in sorted section
References: bsn#197
Modified-by-SEL: No


This reverts commit e6e61aab4967be9138f99e6d40b29aaf2d416576.

Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 kernel/irq/internals.h |  2 --
 kernel/irq/irqdesc.c   |  2 --
 kernel/irq/manage.c    | 39 ++++++++++-----------------------------
 3 files changed, 10 insertions(+), 33 deletions(-)

diff --git a/kernel/irq/internals.h b/kernel/irq/internals.h
index e58342ace11f..54363527feea 100644
--- a/kernel/irq/internals.h
+++ b/kernel/irq/internals.h
@@ -29,14 +29,12 @@ extern struct irqaction chained_action;
  * IRQTF_WARNED    - warning "IRQ_WAKE_THREAD w/o thread_fn" has been printed
  * IRQTF_AFFINITY  - irq thread is requested to adjust affinity
  * IRQTF_FORCED_THREAD  - irq action is force threaded
- * IRQTF_READY     - signals that irq thread is ready
  */
 enum {
 	IRQTF_RUNTHREAD,
 	IRQTF_WARNED,
 	IRQTF_AFFINITY,
 	IRQTF_FORCED_THREAD,
-	IRQTF_READY,
 };
 
 /*
diff --git a/kernel/irq/irqdesc.c b/kernel/irq/irqdesc.c
index ca36c6179aa7..1a7723604399 100644
--- a/kernel/irq/irqdesc.c
+++ b/kernel/irq/irqdesc.c
@@ -405,7 +405,6 @@ static struct irq_desc *alloc_desc(int irq, int node, unsigned int flags,
 	lockdep_set_class(&desc->lock, &irq_desc_lock_class);
 	mutex_init(&desc->request_mutex);
 	init_rcu_head(&desc->rcu);
-	init_waitqueue_head(&desc->wait_for_threads);
 
 	desc_set_defaults(irq, desc, node, affinity, owner);
 	irqd_set(&desc->irq_data, flags);
@@ -574,7 +573,6 @@ int __init early_irq_init(void)
 		raw_spin_lock_init(&desc[i].lock);
 		lockdep_set_class(&desc[i].lock, &irq_desc_lock_class);
 		mutex_init(&desc[i].request_mutex);
-		init_waitqueue_head(&desc[i].wait_for_threads);
 		desc_set_defaults(i, &desc[i], node, NULL, NULL);
 	}
 	return arch_early_irq_init();
diff --git a/kernel/irq/manage.c b/kernel/irq/manage.c
index 92d94615cbbb..79dc02b956dc 100644
--- a/kernel/irq/manage.c
+++ b/kernel/irq/manage.c
@@ -1148,31 +1148,6 @@ static void irq_wake_secondary(struct irq_desc *desc, struct irqaction *action)
 	raw_spin_unlock_irq(&desc->lock);
 }
 
-/*
- * Internal function to notify that a interrupt thread is ready.
- */
-static void irq_thread_set_ready(struct irq_desc *desc,
-				 struct irqaction *action)
-{
-	set_bit(IRQTF_READY, &action->thread_flags);
-	wake_up(&desc->wait_for_threads);
-}
-
-/*
- * Internal function to wake up a interrupt thread and wait until it is
- * ready.
- */
-static void wake_up_and_wait_for_irq_thread_ready(struct irq_desc *desc,
-						  struct irqaction *action)
-{
-	if (!action || !action->thread)
-		return;
-
-	wake_up_process(action->thread);
-	wait_event(desc->wait_for_threads,
-		   test_bit(IRQTF_READY, &action->thread_flags));
-}
-
 /*
  * Interrupt handler thread
  */
@@ -1184,8 +1159,6 @@ static int irq_thread(void *data)
 	irqreturn_t (*handler_fn)(struct irq_desc *desc,
 			struct irqaction *action);
 
-	irq_thread_set_ready(desc, action);
-
 	if (force_irqthreads && test_bit(IRQTF_FORCED_THREAD,
 					&action->thread_flags))
 		handler_fn = irq_forced_thread_fn;
@@ -1610,6 +1583,8 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 	}
 
 	if (!shared) {
+		init_waitqueue_head(&desc->wait_for_threads);
+
 		/* Setup the type (level, edge polarity) if configured: */
 		if (new->flags & IRQF_TRIGGER_MASK) {
 			ret = __irq_set_trigger(desc,
@@ -1699,8 +1674,14 @@ __setup_irq(unsigned int irq, struct irq_desc *desc, struct irqaction *new)
 
 	irq_setup_timings(desc, new);
 
-	wake_up_and_wait_for_irq_thread_ready(desc, new);
-	wake_up_and_wait_for_irq_thread_ready(desc, new->secondary);
+	/*
+	 * Strictly no need to wake it up, but hung_task complains
+	 * when no hard interrupt wakes the thread up.
+	 */
+	if (new->thread)
+		wake_up_process(new->thread);
+	if (new->secondary)
+		wake_up_process(new->secondary->thread);
 
 	register_irq_proc(irq, desc);
 	new->dir = NULL;
-- 
2.34.1

