Git-commit: 5823fc96d754d824bb298622055e8dd5e1252122
Message-Id: <5823fc96d754d824bb298622055e8dd5e1252122.1637135496.git.geliang.tang@suse.com>
From: Paolo Abeni <pabeni@redhat.com>
Date: Tue, 26 Oct 2021 16:29:13 -0700
Subject: [PATCH] tcp: define macros for a couple reclaim thresholds
References: bsn#2
Patch-mainline: v5.16-rc1

A following patch is going to implement a similar reclaim schema
for the MPTCP protocol, with different locking.

Let's define a couple of macros for the used thresholds, so
that the latter code will be more easily maintainable.

Signed-off-by: Paolo Abeni <pabeni@redhat.com>
Signed-off-by: Mat Martineau <mathew.j.martineau@linux.intel.com>
Signed-off-by: Jakub Kicinski <kuba@kernel.org>
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 include/net/sock.h | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1536,6 +1536,11 @@ static inline void sk_mem_charge(struct
 	sk->sk_forward_alloc -= size;
 }
 
+/* the following macros control memory reclaiming in sk_mem_uncharge()
+ */
+#define SK_RECLAIM_THRESHOLD	(1 << 21)
+#define SK_RECLAIM_CHUNK	(1 << 20)
+
 static inline void sk_mem_uncharge(struct sock *sk, int size)
 {
 	int reclaimable;
@@ -1552,8 +1557,8 @@ static inline void sk_mem_uncharge(struc
 	 * If we reach 2 MBytes, reclaim 1 MBytes right now, there is
 	 * no need to hold that much forward allocation anyway.
 	 */
-	if (unlikely(reclaimable >= 1 << 21))
-		__sk_mem_reclaim(sk, 1 << 20);
+	if (unlikely(reclaimable >= SK_RECLAIM_THRESHOLD))
+		__sk_mem_reclaim(sk, SK_RECLAIM_CHUNK);
 }
 
 DECLARE_STATIC_KEY_FALSE(tcp_tx_skb_cache_key);
