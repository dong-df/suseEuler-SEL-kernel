From a4d2a7ad86834092b327082004ead755d2603376 Mon Sep 17 00:00:00 2001
Message-Id: <a4d2a7ad86834092b327082004ead755d2603376.1649664413.git.geliang.tang@suse.com>
From: Brendan Jackman <jackmanb@google.com>
Date: Mon, 14 Dec 2020 11:38:12 +0000
Subject: [PATCH] libbpf: Expose libbpf ring_buffer epoll_fd
Git-commit: a4d2a7ad86834092b327082004ead755d2603376
Patch-mainline: v5.11-rc1
References: bsn#127
Modified-by-SEL: No


This provides a convenient perf ringbuf -> libbpf ringbuf migration
path for users of external polling systems. It is analogous to
perf_buffer__epoll_fd.

Signed-off-by: Brendan Jackman <jackmanb@google.com>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20201214113812.305274-1-jackmanb@google.com
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 tools/lib/bpf/libbpf.h   |    1 +
 tools/lib/bpf/libbpf.map |    1 +
 tools/lib/bpf/ringbuf.c  |    6 ++++++
 3 files changed, 8 insertions(+)

--- a/tools/lib/bpf/libbpf.h
+++ b/tools/lib/bpf/libbpf.h
@@ -537,6 +537,7 @@ LIBBPF_API int ring_buffer__add(struct r
 				ring_buffer_sample_fn sample_cb, void *ctx);
 LIBBPF_API int ring_buffer__poll(struct ring_buffer *rb, int timeout_ms);
 LIBBPF_API int ring_buffer__consume(struct ring_buffer *rb);
+LIBBPF_API int ring_buffer__epoll_fd(const struct ring_buffer *rb);
 
 /* Perf buffer APIs */
 struct perf_buffer;
--- a/tools/lib/bpf/libbpf.map
+++ b/tools/lib/bpf/libbpf.map
@@ -346,6 +346,7 @@ LIBBPF_0.3.0 {
 		btf__parse_split;
 		btf__new_empty_split;
 		btf__new_split;
+		ring_buffer__epoll_fd;
 		xsk_setup_xdp_prog;
 		xsk_socket__update_xskmap;
 } LIBBPF_0.2.0;
--- a/tools/lib/bpf/ringbuf.c
+++ b/tools/lib/bpf/ringbuf.c
@@ -294,3 +294,9 @@ int ring_buffer__poll(struct ring_buffer
 		return INT_MAX;
 	return res;
 }
+
+/* Get an fd that can be used to sleep until data is available in the ring(s) */
+int ring_buffer__epoll_fd(const struct ring_buffer *rb)
+{
+	return rb->epoll_fd;
+}
