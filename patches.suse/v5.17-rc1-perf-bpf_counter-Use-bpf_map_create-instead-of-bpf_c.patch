From 8d0f9e73efe7f0ff4b1d0d013044e8ef91782689 Mon Sep 17 00:00:00 2001
Message-Id: <8d0f9e73efe7f0ff4b1d0d013044e8ef91782689.1652321363.git.geliang.tang@suse.com>
From: Song Liu <song@kernel.org>
Date: Tue, 7 Dec 2021 15:23:40 -0800
Subject: [PATCH] perf/bpf_counter: Use bpf_map_create instead of
 bpf_create_map
Git-commit: 8d0f9e73efe7f0ff4b1d0d013044e8ef91782689
Patch-mainline: v5.17-rc1
References: bsn#210
Modified-by-SEL: Yes, refreshed due to context changes

bpf_create_map is deprecated. Replace it with bpf_map_create. Also add a
__weak bpf_map_create() so that when older version of libbpf is linked as
a shared library, it falls back to bpf_create_map().

Fixes: 992c4225419a ("libbpf: Unify low-level map creation APIs w/ new bpf_map_create()")
Signed-off-by: Song Liu <song@kernel.org>
Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Link: https://lore.kernel.org/bpf/20211207232340.2561471-1-song@kernel.org
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 tools/perf/util/bpf_counter.c | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

--- a/tools/perf/util/bpf_counter.c
+++ b/tools/perf/util/bpf_counter.c
@@ -333,6 +333,20 @@ static __u32 bpf_map_get_id(int fd)
 	return map_info.id;
 }
 
+int __weak
+bpf_map_create(enum bpf_map_type map_type,
+	       const char *map_name __maybe_unused,
+	       __u32 key_size,
+	       __u32 value_size,
+	       __u32 max_entries,
+	       const struct bpf_map_create_opts *opts __maybe_unused)
+{
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+	return bpf_create_map(map_type, key_size, value_size, max_entries, 0);
+#pragma GCC diagnostic pop
+}
+
 static int bperf_lock_attr_map(struct target *target)
 {
 	char path[PATH_MAX];
@@ -346,10 +360,10 @@ static int bperf_lock_attr_map(struct ta
 	}
 
 	if (access(path, F_OK)) {
-		map_fd = bpf_create_map(BPF_MAP_TYPE_HASH,
+		map_fd = bpf_map_create(BPF_MAP_TYPE_HASH, NULL,
 					sizeof(struct perf_event_attr),
 					sizeof(struct perf_event_attr_map_entry),
-					ATTR_MAP_SIZE, 0);
+					ATTR_MAP_SIZE, NULL);
 		if (map_fd < 0)
 			return -1;
 
