From 20ec5cf653778bd1ba90c86fb868482b4cbd32fd Mon Sep 17 00:00:00 2001
From: Guoqing Jiang <guoqing.jiang@suse.com>
Date: Fri, 18 Feb 2022 14:01:29 +0800
Subject: [PATCH] Revert "arm64: mte: Ensure TIF_MTE_ASYNC_FAULT is set
 atomically"
Patch-mainline: Never, revert stable patch which is added again in sorted section
References: bsn#12
Modified-by-SEL: No

This reverts commit 496e2fabbbe37c9d2991646114f87c9a11a47bd9.

Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/Kconfig        |  6 +-----
 arch/arm64/kernel/entry.S | 10 ++++------
 2 files changed, 5 insertions(+), 11 deletions(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 3da71fe56b92..ab13633b7178 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -1391,13 +1391,10 @@ config ARM64_PAN
 	 The feature is detected at runtime, and will remain as a 'nop'
 	 instruction if the cpu does not implement the feature.
 
-config AS_HAS_LSE_ATOMICS
-	def_bool $(as-instr,.arch_extension lse)
-
 config ARM64_LSE_ATOMICS
 	bool
 	default ARM64_USE_LSE_ATOMICS
-	depends on AS_HAS_LSE_ATOMICS
+	depends on $(as-instr,.arch_extension lse)
 
 config ARM64_USE_LSE_ATOMICS
 	bool "Atomic instructions"
@@ -1671,7 +1668,6 @@ config ARM64_MTE
 	bool "Memory Tagging Extension support"
 	default y
 	depends on ARM64_AS_HAS_MTE && ARM64_TAGGED_ADDR_ABI
-	depends on AS_HAS_LSE_ATOMICS
 	select ARCH_USES_HIGH_VMA_FLAGS
 	help
 	  Memory Tagging (part of the ARMv8.5 Extensions) provides
diff --git a/arch/arm64/kernel/entry.S b/arch/arm64/kernel/entry.S
index 2da82c139e1c..d72c818b019c 100644
--- a/arch/arm64/kernel/entry.S
+++ b/arch/arm64/kernel/entry.S
@@ -148,18 +148,16 @@ alternative_cb_end
 	.endm
 
 	/* Check for MTE asynchronous tag check faults */
-	.macro check_mte_async_tcf, tmp, ti_flags
+	.macro check_mte_async_tcf, flgs, tmp
 #ifdef CONFIG_ARM64_MTE
-	.arch_extension lse
 alternative_if_not ARM64_MTE
 	b	1f
 alternative_else_nop_endif
 	mrs_s	\tmp, SYS_TFSRE0_EL1
 	tbz	\tmp, #SYS_TFSR_EL1_TF0_SHIFT, 1f
 	/* Asynchronous TCF occurred for TTBR0 access, set the TI flag */
-	mov	\tmp, #_TIF_MTE_ASYNC_FAULT
-	add	\ti_flags, tsk, #TSK_TI_FLAGS
-	stset	\tmp, [\ti_flags]
+	orr	\flgs, \flgs, #_TIF_MTE_ASYNC_FAULT
+	str	\flgs, [tsk, #TSK_TI_FLAGS]
 	msr_s	SYS_TFSRE0_EL1, xzr
 1:
 #endif
@@ -209,7 +207,7 @@ alternative_else_nop_endif
 	disable_step_tsk x19, x20
 
 	/* Check for asynchronous tag check faults in user space */
-	check_mte_async_tcf x22, x23
+	check_mte_async_tcf x19, x22
 	apply_ssbd 1, x22, x23
 
 	ptrauth_keys_install_kernel tsk, x20, x22, x23
-- 
2.26.2

