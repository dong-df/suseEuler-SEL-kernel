From 83a157279f2125ce1c4d6d93750440853746dff0 Mon Sep 17 00:00:00 2001
Message-Id: <83a157279f2125ce1c4d6d93750440853746dff0.1649661706.git.geliang.tang@suse.com>
From: Andrii Nakryiko <andrii@kernel.org>
Date: Fri, 23 Apr 2021 11:13:40 -0700
Subject: [PATCH] libbpf: Tighten BTF type ID rewriting with error checking
Git-commit: 83a157279f2125ce1c4d6d93750440853746dff0
Patch-mainline: v5.13-rc1
References: bsn#127
Modified-by-SEL: No


It should never fail, but if it does, it's better to know about this rather
than end up with nonsensical type IDs.

Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Acked-by: Yonghong Song <yhs@fb.com>
Link: https://lore.kernel.org/bpf/20210423181348.1801389-11-andrii@kernel.org
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 tools/lib/bpf/linker.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/tools/lib/bpf/linker.c b/tools/lib/bpf/linker.c
index b0e038480300..5505c85e8b7b 100644
--- a/tools/lib/bpf/linker.c
+++ b/tools/lib/bpf/linker.c
@@ -1429,6 +1429,13 @@ static int linker_fixup_btf(struct src_obj *obj)
 static int remap_type_id(__u32 *type_id, void *ctx)
 {
 	int *id_map = ctx;
+	int new_id = id_map[*type_id];
+
+	/* Error out if the type wasn't remapped. Ignore VOID which stays VOID. */
+	if (new_id == 0 && *type_id != 0) {
+		pr_warn("failed to find new ID mapping for original BTF type ID %u\n", *type_id);
+		return -EINVAL;
+	}
 
 	*type_id = id_map[*type_id];
 
-- 
2.34.1

