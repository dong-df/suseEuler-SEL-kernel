From e06b425bc835ead08b9fd935bf5e47eef473e7a0 Mon Sep 17 00:00:00 2001
Message-Id: <e06b425bc835ead08b9fd935bf5e47eef473e7a0.1659925848.git.geliang.tang@suse.com>
From: Christoph Hellwig <hch@lst.de>
Date: Thu, 21 Jul 2022 07:56:35 +0200
Subject: [PATCH] nvme: catch -ENODEV from nvme_revalidate_zones again
Git-commit: e06b425bc835ead08b9fd935bf5e47eef473e7a0
Patch-mainline: v6.0-rc1
References: bsn#210
Modified-by-SEL: Yes, refreshed due to context changes

nvme_revalidate_zones can also return -ENODEV if e.g. zone sizes aren't
constant or not a power of two.  In that case we should jump to marking
the gendisk hidden and only support pass through.

Fixes: 602e57c9799c ("nvme: also mark passthrough-only namespaces ready in nvme_update_ns_info")
Reported-by: Joel Granados <j.granados@samsung.com>
Signed-off-by: Christoph Hellwig <hch@lst.de>
Reviewed-by: Joel Granados <j.granados@samsung.com>
Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
Signed-off-by: Jens Axboe <axboe@kernel.dk>
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 drivers/nvme/host/core.c | 13 +++++++------
 1 file changed, 7 insertions(+), 6 deletions(-)

--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -2196,13 +2196,17 @@ static int nvme_update_ns_info(struct nv
 
 	if (ns->head->ids.csi == NVME_CSI_ZNS) {
 		ret = nvme_update_zone_info(ns, lbaf);
-		if (ret)
-			goto out_unfreeze;
+		if (ret) {
+			blk_mq_unfreeze_queue(ns->disk->queue);
+			goto out;
+		}
 	}
 
 	ret = nvme_configure_metadata(ns, id);
-	if (ret)
-		goto out_unfreeze;
+	if (ret) {
+		blk_mq_unfreeze_queue(ns->disk->queue);
+		goto out;
+	}
 	nvme_set_chunk_sectors(ns, id);
 	nvme_update_disk_info(ns->disk, ns, id);
 	set_bit(NVME_NS_READY, &ns->flags);
@@ -2211,7 +2215,7 @@ static int nvme_update_ns_info(struct nv
 	if (blk_queue_is_zoned(ns->queue)) {
 		ret = nvme_revalidate_zones(ns);
 		if (ret && !nvme_first_scan(ns->disk))
-			return ret;
+			goto out;
 	}
 
 #ifdef CONFIG_NVME_MULTIPATH
@@ -2226,9 +2230,8 @@ static int nvme_update_ns_info(struct nv
 		blk_mq_unfreeze_queue(ns->head->disk->queue);
 	}
 #endif
-	return 0;
-
-out_unfreeze:
+	ret = 0;
+out:
 	/*
 	 * If probing fails due an unsupported feature, hide the block device,
 	 * but still allow other access.
@@ -2238,7 +2241,6 @@ out_unfreeze:
 		set_bit(NVME_NS_READY, &ns->flags);
 		ret = 0;
 	}
-	blk_mq_unfreeze_queue(ns->disk->queue);
 	return ret;
 }
 
