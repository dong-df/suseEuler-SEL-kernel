From d979617aa84d96acca44c2f5778892b4565e322f Mon Sep 17 00:00:00 2001
Message-Id: <d979617aa84d96acca44c2f5778892b4565e322f.1648732270.git.geliang.tang@suse.com>
From: Eric Dumazet <edumazet@google.com>
Date: Tue, 26 Oct 2021 14:41:32 -0700
Subject: [PATCH] bpf: Fixes possible race in update_prog_stats() for 32bit
 arches
Git-commit: d979617aa84d96acca44c2f5778892b4565e322f
Patch-mainline: v5.16-rc1
References: bsn#127
Modified-by-SEL: No


It seems update_prog_stats() suffers from same issue fixed
in the prior patch:

As it can run while interrupts are enabled, it could
be re-entered and the u64_stats syncp could be mangled.

Fixes: fec56f5890d9 ("bpf: Introduce BPF trampoline")
Signed-off-by: Eric Dumazet <edumazet@google.com>
Signed-off-by: Alexei Starovoitov <ast@kernel.org>
Link: https://lore.kernel.org/bpf/20211026214133.3114279-3-eric.dumazet@gmail.com
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 kernel/bpf/trampoline.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/kernel/bpf/trampoline.c b/kernel/bpf/trampoline.c
index 39eaaff81953..e5963de368ed 100644
--- a/kernel/bpf/trampoline.c
+++ b/kernel/bpf/trampoline.c
@@ -586,11 +586,13 @@ static void notrace update_prog_stats(struct bpf_prog *prog,
 	     * Hence check that 'start' is valid.
 	     */
 	    start > NO_START_TIME) {
+		unsigned long flags;
+
 		stats = this_cpu_ptr(prog->stats);
-		u64_stats_update_begin(&stats->syncp);
+		flags = u64_stats_update_begin_irqsave(&stats->syncp);
 		stats->cnt++;
 		stats->nsecs += sched_clock() - start;
-		u64_stats_update_end(&stats->syncp);
+		u64_stats_update_end_irqrestore(&stats->syncp, flags);
 	}
 }
 
-- 
2.34.1

