From: Hannes Reinecke <hare@suse.de>
Subject: dm multipath devices are not getting created for readonly devices
References: bsn#124 bnc#382705
Patch-mainline: not yet, <hare: will revisit, Oct 4, 2017>
Modified-by-SEL: Yes, because 17587-dm-mpath-fix-UAF-in-multipath_message.patch
		 touched same function.

Currently we cannot create device-mapper tables for multipath devices
whenever they are read-only.
This patch modifies the device-mapper to set the 'READ-ONLY' flag
automatically whenever a read-only is added to the table.

Signed-off-by: Hannes Reinecke <hare@suse.de>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/md/dm-table.c |    3 +++
 drivers/md/dm.c       |   25 ++++++++++++++++++++++---
 2 files changed, 25 insertions(+), 3 deletions(-)

--- a/drivers/md/dm-table.c
+++ b/drivers/md/dm-table.c
@@ -397,6 +397,9 @@ int __dm_get_device(struct dm_target *ti
 				return r;
 			}
 
+			if (dd->dm_dev->mode != mode)
+				t->mode = dd->dm_dev->mode;
+
 			refcount_set(&dd->count, 1);
 			list_add(&dd->list, &t->devices);
 			goto out;
--- a/drivers/md/dm.c
+++ b/drivers/md/dm.c
@@ -302,16 +302,25 @@ int dm_deleting_md(struct mapped_device
 static int dm_blk_open(struct block_device *bdev, fmode_t mode)
 {
 	struct mapped_device *md;
+	int retval = 0;
 
 	spin_lock(&_minor_lock);
 
 	md = bdev->bd_disk->private_data;
-	if (!md)
+	if (!md) {
+		retval = -ENXIO;
 		goto out;
+	}
 
 	if (test_bit(DMF_FREEING, &md->flags) ||
 	    dm_deleting_md(md)) {
 		md = NULL;
+		retval = -ENXIO;
+		goto out;
+	}
+	if (get_disk_ro(md->disk) && (mode & FMODE_WRITE)) {
+		md = NULL;
+		retval = -EROFS;
 		goto out;
 	}
 
@@ -320,7 +329,7 @@ static int dm_blk_open(struct block_devi
 out:
 	spin_unlock(&_minor_lock);
 
-	return md ? 0 : -ENXIO;
+	return retval;
 }
 
 static void dm_blk_close(struct gendisk *disk, fmode_t mode)
@@ -774,7 +783,12 @@ int dm_get_table_device(struct mapped_de
 		td->dm_dev.mode = mode;
 		td->dm_dev.bdev = NULL;
 
-		if ((r = open_table_device(td, dev, md))) {
+		r = open_table_device(td, dev, md);
+		if (r == -EROFS) {
+			td->dm_dev.mode &= ~FMODE_WRITE;
+			r = open_table_device(td, dev, md);
+		}
+		if (r) {
 			mutex_unlock(&md->table_devices_lock);
 			kfree(td);
 			return r;
@@ -2013,6 +2027,11 @@ static struct dm_table *__bind(struct ma
 		goto out;
 	}
 
+	if (!(dm_table_get_mode(t) & FMODE_WRITE))
+		set_disk_ro(md->disk, 1);
+	else
+		set_disk_ro(md->disk, 0);
+
 	old_map = rcu_dereference_protected(md->map, lockdep_is_held(&md->suspend_lock));
 	rcu_assign_pointer(md->map, (void *)t);
 	md->immutable_target_type = dm_table_get_immutable_target_type(t);
