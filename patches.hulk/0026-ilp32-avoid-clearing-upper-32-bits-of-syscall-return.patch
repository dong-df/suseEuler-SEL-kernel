From d3a61dd6f73c76febcacdba30518750a4ba8d114 Mon Sep 17 00:00:00 2001
From: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Date: Tue, 22 Dec 2020 06:41:00 +0000
Subject: [PATCH] ilp32: avoid clearing upper 32 bits of syscall return value
 for ilp32
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: d3a61dd6f73c76febcacdba30518750a4ba8d114

hulk inclusion
category: bugfix
bugzilla: 46790
DTS: NA

--------------------------------

The following commit clear upper 32 bits of x0 on syscall return for
compat application. But it is only suitable for A32 applications. It is
not correct for ilp32 applications.

Fixes: 15956689a0e60 ("arm64: compat: Ensure upper 32 bits of x0 are zero on syscall return")
Signed-off-by: Xiongfeng Wang <wangxiongfeng2@huawei.com>
Acked-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: Chen Jun <chenjun102@huawei.com>
[Guoqing: differ with original patch because of the stable patch
          patches.stable/v5.10.58-0134-arm64-fix-compat-syscall-return-truncation.patch ]
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/include/asm/syscall.h | 4 ++--
 1 files changed, 1 insertions(+), 1 deletions(-)

--- a/arch/arm64/include/asm/syscall.h
+++ b/arch/arm64/include/asm/syscall.h
@@ -38,7 +38,7 @@ static inline long syscall_get_return_va
 {
 	unsigned long val = regs->regs[0];
 
-	if (is_compat_thread(task_thread_info(task)))
+	if (is_a32_compat_thread(task_thread_info(task)))
 		val = sign_extend64(val, 31);
 
 	return val;
@@ -59,7 +59,7 @@ static inline void syscall_set_return_va
 	if (error)
 		val = error;
 
-	if (is_compat_thread(task_thread_info(task)))
+	if (is_a32_compat_thread(task_thread_info(task)))
 		val = lower_32_bits(val);
 
 	regs->regs[0] = val;
