From 4afa59774f814fc5318f870d36d7411a5f7624ba Mon Sep 17 00:00:00 2001
From: Zhang Qiao <zhangqiao22@huawei.com>
Date: Mon, 12 Jul 2021 20:09:43 +0800
Subject: [PATCH] sched: Unthrottle qos cfs rq when free a task group
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 4afa59774f814fc5318f870d36d7411a5f7624ba


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I3ZX4D
CVE: NA

--------------------------------

When freeing a taskgroup, we will free cfs rqs of the group, even if cfs rqs
have been throttled, otherwise it will cause a Use-After-Free Bug. Therefore
before freeing a taskgroup, we should unthrottle all cfs rqs belonging to
the taskgroup.

Signed-off-by: Zhang Qiao <zhangqiao22@huawei.com>
Signed-off-by: Zheng Zucheng <zhengzucheng@huawei.com>
Reviewed-by: Chen Hui <judy.chenhui@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 kernel/sched/fair.c | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index e9f51193d935..10eee728dabf 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -7159,6 +7159,17 @@ static bool check_qos_cfs_rq(struct cfs_rq *cfs_rq)
 
 	return false;
 }
+
+static inline void unthrottle_qos_sched_group(struct cfs_rq *cfs_rq)
+{
+	struct rq *rq = rq_of(cfs_rq);
+	struct rq_flags rf;
+
+	rq_lock_irqsave(rq, &rf);
+	if (cfs_rq->tg->qos_level == -1 && cfs_rq_throttled(cfs_rq))
+		unthrottle_qos_cfs_rq(cfs_rq);
+	rq_unlock_irqrestore(rq, &rf);
+}
 #endif
 
 struct task_struct *
@@ -11172,6 +11183,10 @@ void free_fair_sched_group(struct task_group *tg)
 	destroy_cfs_bandwidth(tg_cfs_bandwidth(tg));
 
 	for_each_possible_cpu(i) {
+#ifdef CONFIG_QOS_SCHED
+		if (tg->cfs_rq)
+			unthrottle_qos_sched_group(tg->cfs_rq[i]);
+#endif
 		if (tg->cfs_rq)
 			kfree(tg->cfs_rq[i]);
 		if (tg->se)
-- 
2.26.2

