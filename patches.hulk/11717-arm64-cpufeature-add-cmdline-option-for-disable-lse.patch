From 08f90903d0336c05adfcc55f9e2094557e5d8970 Mon Sep 17 00:00:00 2001
From: Xie XiuQi <xiexiuqi@huawei.com>
Date: Fri, 3 Dec 2021 18:15:51 +0800
Subject: [PATCH] arm64: cpufeature: add cmdline option for disable lse
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 08f90903d0336c05adfcc55f9e2094557e5d8970


hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4JBSJ
CVE: NA

----------------------------------------

LSE atomic instruction might introduce performance regression on
specific benchmark or business. So add a cmdline option to
disable/enable it.

"lse=off" cmdline option means disable LSE atomic instruction.

Signed-off-by: Xie XiuQi <xiexiuqi@huawei.com>
Tested-by: Qiang Xiaojun <qiangxiaojun@huawei.com>
[liwei: Fix compile warning with CONFIG_ARM64_LSE_ATOMICS=n]
Signed-off-by: Wei Li <liwei391@huawei.com>
Reviewed-by: Cheng Jian <cj.chengjian@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/kernel/cpufeature.c | 30 +++++++++++++++++++++++++++++-
 1 file changed, 29 insertions(+), 1 deletion(-)

diff --git a/arch/arm64/kernel/cpufeature.c b/arch/arm64/kernel/cpufeature.c
index 1e20a579d30a..4e934aca9f53 100644
--- a/arch/arm64/kernel/cpufeature.c
+++ b/arch/arm64/kernel/cpufeature.c
@@ -1183,6 +1183,20 @@ static u64 __read_sysreg_by_encoding(u32 sys_id)
 
 #include <linux/irqchip/arm-gic-v3.h>
 
+static bool lse_disabled;
+
+static int __init parse_lse(char *str)
+{
+	if (str == NULL)
+		return 1;
+
+	if (!strncmp(str, "off", 3))
+		lse_disabled = true;
+
+	return 0;
+}
+early_param("lse", parse_lse);
+
 static bool
 feature_matches(u64 reg, const struct arm64_cpu_capabilities *entry)
 {
@@ -1205,6 +1219,20 @@ has_cpuid_feature(const struct arm64_cpu_capabilities *entry, int scope)
 	return feature_matches(val, entry);
 }
 
+#ifdef CONFIG_ARM64_LSE_ATOMICS
+static bool has_cpuid_feature_lse(const struct arm64_cpu_capabilities *entry,
+				  int scope)
+{
+	if (lse_disabled) {
+		pr_info_once("%s forced OFF by command line option\n",
+			     entry->desc);
+		return false;
+	}
+
+	return has_cpuid_feature(entry, scope);
+}
+#endif
+
 static bool has_useable_gicv3_cpuif(const struct arm64_cpu_capabilities *entry, int scope)
 {
 	bool has_sre;
@@ -1793,7 +1821,7 @@ static const struct arm64_cpu_capabilities arm64_features[] = {
 		.desc = "LSE atomic instructions",
 		.capability = ARM64_HAS_LSE_ATOMICS,
 		.type = ARM64_CPUCAP_SYSTEM_FEATURE,
-		.matches = has_cpuid_feature,
+		.matches = has_cpuid_feature_lse,
 		.sys_reg = SYS_ID_AA64ISAR0_EL1,
 		.field_pos = ID_AA64ISAR0_ATOMICS_SHIFT,
 		.sign = FTR_UNSIGNED,
-- 
2.26.2

