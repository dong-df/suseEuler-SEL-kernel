From 2085b5553e38f42d557604edc3b697ce9914c3b7 Mon Sep 17 00:00:00 2001
From: Cheng Jian <cj.chengjian@huawei.com>
Date: Sat, 29 May 2021 14:42:45 +0800
Subject: [PATCH] livepatch/arm64: Fix current backtracking in
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 2085b5553e38f42d557604edc3b697ce9914c3b7

 klp_check_calltrace

hulk inclusion
category: bugfix
bugzilla: 51921
CVE: NA

-------------------------------------------------

We through stack checking to ensure the consistency of livepatch.
Task blocked in __switch_to when switch out, thread_saved_fs/pc
store the FP and PC when switching, it can be useful when tracing
blocked threads. For running task, __builtin_frame_address can be
used, but it's difficult to backtracking the running task on other
CPUs.

Fortunately, all CPUs will stay in this function, the current's
backtrace is so similar. so just backtracking the current on this
CPU, skip the current of other CPUs.

Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
Reviewed-by: Li Bin <huawei.libin@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>

Signed-off-by: Wang ShaoBo <bobo.shaobowang@huawei.com>
Signed-off-by: Dong Kai <dongkai11@huawei.com>

Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
Reviewed-by: Yang Jihong <yangjihong1@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/arm64/kernel/livepatch.c | 28 ++++++++++++++++++++++++++--
 1 file changed, 26 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/kernel/livepatch.c b/arch/arm64/kernel/livepatch.c
index e112a6908b8a..8d20106e1bd6 100644
--- a/arch/arm64/kernel/livepatch.c
+++ b/arch/arm64/kernel/livepatch.c
@@ -106,8 +106,32 @@ int klp_check_calltrace(struct klp_patch *patch, int enable)
 	};
 
 	for_each_process_thread(g, t) {
-		frame.fp = thread_saved_fp(t);
-		frame.pc = thread_saved_pc(t);
+		/*
+		 * Handle the current carefully on each CPUs, we shouldn't
+		 * use saved FP and PC when backtrace current. It's difficult
+		 * to backtrack other CPU currents here. But fortunately,
+		 * all CPUs will stay in this function, so the current's
+		 * backtrace is so similar
+		 */
+		if (t == current) {
+			/* current on this CPU */
+			frame.fp = (unsigned long)__builtin_frame_address(0);
+			frame.pc = (unsigned long)klp_check_calltrace;
+		} else if (strncmp(t->comm, "migration/", 10) == 0) {
+			/*
+			 * current on other CPU
+			 * we call this in stop_machine, so the current
+			 * of each CPUs is mirgation, just compare the
+			 * task_comm here, because we can't get the
+			 * cpu_curr(task_cpu(t))). This assumes that no
+			 * other thread will pretend to be a stopper via
+			 * task_comm.Â 
+			 */
+			continue;
+		} else {
+			frame.fp = thread_saved_fp(t);
+			frame.pc = thread_saved_pc(t);
+		}
 		start_backtrace(&frame, frame.fp, frame.pc);
 		walk_stackframe(t, &frame, klp_check_activeness_func, &args);
 		if (args.ret) {
-- 
2.26.2

