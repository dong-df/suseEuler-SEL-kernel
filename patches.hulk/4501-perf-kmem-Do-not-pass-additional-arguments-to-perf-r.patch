From 3c17e7f060c7a40b81dd75333a57a8136db26de8 Mon Sep 17 00:00:00 2001
From: Li Huafei <lihuafei1@huawei.com>
Date: Fri, 23 Apr 2021 14:19:53 +0800
Subject: [PATCH] perf kmem: Do not pass additional arguments to 'perf record'
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 3c17e7f060c7a40b81dd75333a57a8136db26de8


hulk inclusion
category: bugfix
bugzilla: 51797
CVE: NA

--------------------------------

The commit be8299e4a2e2 passes additional arguments directly to the
'perf record' to support the '-o' option. If used in the current
format of the'perf kmem --help' command, there is no problem. But
we're used to using this: 'perf kmem record --slab --page', where the
subcommand is placed before the option. After the commit be8299e4a2e2,
there is a problem with this use:

  # perf kmem record --slab --page
   Error: unknown option `slab'

  Usage: perf record [<options>] [<command>]
     or: perf record [<options>] -- <command> [<options>]

     -a, --all-cpus        system-wide collection from all CPUs
     -b, --branch-any      sample any taken branches
     -B, --no-buildid      do not collect buildids in perf.data
     -c, --count <n>       event period to sample
     -C, --cpu <cpu>       list of cpus to monitor
     -d, --data            Record the sample addresses
     ...

This is because we pass all the options directly to 'perf record', but
these options are 'perf kmem' options. In order to be able to use the
format 'perf kmem {record|stat} [option]', we revert the commit be8299e4a2e2.
In order to still support the '-o' option, we first process the '-o' option
in 'perf kmem' and then add it to the list of options in'perf record'.

Fixes: be8299e4a2e2("perf kmem: Pass additional arguments to 'perf record'")
Signed-off-by: Li Huafei <lihuafei1@huawei.com>
Reviewed-by: Yang Jihong <yangjihong1@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 tools/perf/builtin-kmem.c | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/tools/perf/builtin-kmem.c b/tools/perf/builtin-kmem.c
index a50dae2c4ae9..71c27b530721 100644
--- a/tools/perf/builtin-kmem.c
+++ b/tools/perf/builtin-kmem.c
@@ -82,6 +82,9 @@ static unsigned long nr_allocs, nr_cross_allocs;
 static struct perf_time_interval ptime;
 const char *time_str;
 
+/* output file of 'perf kmem record' */
+static const char *output_name;
+
 static int insert_alloc_stat(unsigned long call_site, unsigned long ptr,
 			     int bytes_req, int bytes_alloc, int cpu)
 {
@@ -1848,6 +1851,8 @@ static int __cmd_record(int argc, const char **argv)
 		rec_argc += ARRAY_SIZE(slab_events);
 	if (kmem_page)
 		rec_argc += ARRAY_SIZE(page_events) + 1; /* for -g */
+	if (output_name)
+		rec_argc += 2;
 
 	rec_argv = calloc(rec_argc + 1, sizeof(char *));
 
@@ -1868,6 +1873,11 @@ static int __cmd_record(int argc, const char **argv)
 			rec_argv[i] = strdup(page_events[j]);
 	}
 
+	if (output_name) {
+		rec_argv[i++] = strdup("-o");
+		rec_argv[i++] = strdup(output_name);
+	}
+
 	for (j = 1; j < (unsigned int)argc; j++, i++)
 		rec_argv[i] = argv[j];
 
@@ -1899,6 +1909,7 @@ int cmd_kmem(int argc, const char **argv)
 	};
 	const struct option kmem_options[] = {
 	OPT_STRING('i', "input", &input_name, "file", "input file name"),
+	OPT_STRING('o', "output", &output_name, "file", "output file name"),
 	OPT_INCR('v', "verbose", &verbose,
 		    "be more verbose (show symbol address, etc)"),
 	OPT_CALLBACK_NOOPT(0, "caller", NULL, NULL,
@@ -1933,8 +1944,7 @@ int cmd_kmem(int argc, const char **argv)
 		return ret;
 
 	argc = parse_options_subcommand(argc, argv, kmem_options,
-					kmem_subcommands, kmem_usage,
-					PARSE_OPT_STOP_AT_NON_OPTION);
+					kmem_subcommands, kmem_usage, 0);
 
 	if (!argc)
 		usage_with_options(kmem_usage, kmem_options);
-- 
2.26.2

