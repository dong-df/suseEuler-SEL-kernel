From 1c76b8cf0bd5dbcd0ebb576384e2f3af77aaec99 Mon Sep 17 00:00:00 2001
From: Kemeng Shi <shikemeng@huawei.com>
Date: Sat, 8 Jan 2022 18:52:33 +0800
Subject: [PATCH] acpi/numa: memorize node type from SRAT table
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 1c76b8cf0bd5dbcd0ebb576384e2f3af77aaec99


euleros inclusion
category: feature
feature: etmem
bugzilla: https://gitee.com/openeuler/kernel/issues/I4OODH?from=project-issue
CVE: NA

-------------------------------------------------

Driver dax_kmem will export pmem as a NUMA node. This patch will
record node consists of persistent memory for futher use.

Signed-off-by: Kemeng Shi <shikemeng@huawei.com>
Reviewed-by: louhongxiang <louhongxiang@huawei.com>
Reviewed-by: Kefeng Wang <wangkefeng.wang@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 drivers/acpi/numa/srat.c |  5 +++++
 include/linux/numa.h     | 12 ++++++++++++
 mm/page_alloc.c          | 13 +++++++++++++
 3 files changed, 30 insertions(+)

diff --git a/drivers/acpi/numa/srat.c b/drivers/acpi/numa/srat.c
index 6021a1013442..c9aca749ed66 100644
--- a/drivers/acpi/numa/srat.c
+++ b/drivers/acpi/numa/srat.c
@@ -279,6 +279,11 @@ acpi_numa_memory_affinity_init(struct acpi_srat_mem_affinity *ma)
 
 	node_set(node, numa_nodes_parsed);
 
+	if (ma->flags & ACPI_SRAT_MEM_NON_VOLATILE)
+		set_node_type(node, NODE_TYPE_PMEM);
+	else
+		set_node_type(node, NODE_TYPE_DRAM);
+
 	pr_info("SRAT: Node %u PXM %u [mem %#010Lx-%#010Lx]%s%s\n",
 		node, pxm,
 		(unsigned long long) start, (unsigned long long) end - 1,
diff --git a/include/linux/numa.h b/include/linux/numa.h
index cb44cfe2b725..22a2ce0c33f7 100644
--- a/include/linux/numa.h
+++ b/include/linux/numa.h
@@ -20,6 +20,11 @@
 #define __initdata_or_meminfo __initdata
 #endif
 
+enum node_type {
+	NODE_TYPE_DRAM,
+	NODE_TYPE_PMEM,
+};
+
 #ifdef CONFIG_NUMA
 #include <linux/printk.h>
 #include <asm/sparsemem.h>
@@ -43,6 +48,8 @@ static inline int phys_to_target_node(u64 start)
 	return 0;
 }
 #endif
+void set_node_type(int nid, enum node_type type);
+enum node_type get_node_type(int nid);
 #else /* !CONFIG_NUMA */
 static inline int numa_map_to_online_node(int node)
 {
@@ -56,6 +63,11 @@ static inline int phys_to_target_node(u64 start)
 {
 	return 0;
 }
+static inline enum node_type get_node_type(int nid)
+{
+	return NODE_TYPE_DRAM;
+}
+static inline void set_node_type(int nid, enum node_type type) {}
 #endif
 
 #endif /* _LINUX_NUMA_H */
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 43fe0c8e592e..22f6824b1714 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -9158,3 +9158,16 @@ bool take_page_off_buddy(struct page *page)
 	return ret;
 }
 #endif
+
+#ifdef CONFIG_NUMA
+enum node_type nodes_type[MAX_NUMNODES];
+
+void set_node_type(int nid, enum node_type type)
+{
+	nodes_type[nid] = type;
+}
+enum node_type get_node_type(int nid)
+{
+	return nodes_type[nid];
+}
+#endif
-- 
2.26.2

