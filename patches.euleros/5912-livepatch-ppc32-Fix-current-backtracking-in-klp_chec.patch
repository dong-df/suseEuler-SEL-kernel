From 225f0374212f6b0c9703ec449086d2dc57e7ee74 Mon Sep 17 00:00:00 2001
From: Cheng Jian <cj.chengjian@huawei.com>
Date: Sat, 29 May 2021 14:43:00 +0800
Subject: [PATCH] livepatch/ppc32: Fix current backtracking in
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: 225f0374212f6b0c9703ec449086d2dc57e7ee74

 klp_check_calltrace

euler inclusion
category: bugfix
bugzilla: 51924
CVE: NA

---------------------------------

We through stack checking to ensure the consistency of livepatch.
Task blocked in __switch_to when switch out, thread_saved_fs/pc
store the FP and PC when switching, it can be useful when tracing
blocked threads. For running task, current_stack_pointer can be
used, but it's difficult to backtracking the running task on other
CPUs.

Fortunately, all CPUs will stay in this function, the current's
backtrace is so similar. so just backtracking the current on this
CPU, skip the current of other CPUs.

Signed-off-by: Cheng Jian <cj.chengjian@huawei.com>
Reviewed-by: Xie XiuQi <xiexiuqi@huawei.com>
Signed-off-by: zhangyi (F) <yi.zhang@huawei.com>

Signed-off-by: Dong Kai <dongkai11@huawei.com>

Signed-off-by: Ye Weihua <yeweihua4@huawei.com>
Reviewed-by: Kuohai Xu <xukuohai@huawei.com>
Reviewed-by: Yang Jihong <yangjihong1@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 arch/powerpc/kernel/livepatch_32.c | 25 ++++++++++++++++++++++++-
 1 file changed, 24 insertions(+), 1 deletion(-)

diff --git a/arch/powerpc/kernel/livepatch_32.c b/arch/powerpc/kernel/livepatch_32.c
index 4f51ef04a6b1..da6c9592d1f8 100644
--- a/arch/powerpc/kernel/livepatch_32.c
+++ b/arch/powerpc/kernel/livepatch_32.c
@@ -152,7 +152,30 @@ int klp_check_calltrace(struct klp_patch *patch, int enable)
 	};
 
 	for_each_process_thread(g, t) {
-		stack = (unsigned long *)t->thread.ksp;
+		if (t == current) {
+			/*
+			 * Handle the current carefully on each CPUs, we shouldn't
+			 * use saved FP and PC when backtrace current. It's difficult
+			 * to backtrack other CPU currents here. But fortunately,
+			 * all CPUs will stay in this function, so the current's
+			 * backtrace is so similar
+			 */
+			stack = (unsigned long *)current_stack_pointer;
+		} else if (strncmp(t->comm, "migration/", 10) == 0) {
+			/*
+			 * current on other CPU
+			 * we call this in stop_machine, so the current
+			 * of each CPUs is mirgation, just compare the
+			 * task_comm here, because we can't get the
+			 * cpu_curr(task_cpu(t))). This assumes that no
+			 * other thread will pretend to be a stopper via
+			 * task_comm.
+			 */
+			continue;
+		} else {
+			stack = (unsigned long *)t->thread.ksp;
+		}
+
 		frame.sp = (unsigned long)stack;
 		frame.pc = stack[STACK_FRAME_LR_SAVE];
 		klp_walk_stackframe(&frame, klp_check_activeness_func,
-- 
2.26.2

