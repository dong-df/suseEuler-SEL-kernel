Git-commit: 35da670ed13ee161a9c943b839469fb3baf0e8fd
Message-Id: <35da670ed13ee161a9c943b839469fb3baf0e8fd.1664158089.git.geliang.tang@suse.com>
In-Reply-To: <6bae47548188ae957578e6d92d4b8753dec435e4.1664158088.git.geliang.tang@suse.com>
References: <6bae47548188ae957578e6d92d4b8753dec435e4.1664158088.git.geliang.tang@suse.com>
From: David Howells <dhowells@redhat.com>
Date: Fri, 6 May 2022 23:55:21 +0100
Subject: [PATCH] rxrpc: Fix local destruction being repeated
References: bsn#19
Patch-mainline: v5.10.145

[ Upstream commit d3d863036d688313f8d566b87acd7d99daf82749 ]

If the local processor work item for the rxrpc local endpoint gets requeued
by an event (such as an incoming packet) between it getting scheduled for
destruction and the UDP socket being closed, the rxrpc_local_destroyer()
function can get run twice.  The second time it can hang because it can end
up waiting for cleanup events that will never happen.

Signed-off-by: David Howells <dhowells@redhat.com>
Signed-off-by: Sasha Levin <sashal@kernel.org>
Signed-off-by: Geliang Tang <geliang.tang@suse.com>
---
 net/rxrpc/local_object.c | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/net/rxrpc/local_object.c b/net/rxrpc/local_object.c
index 8c2881054266..ebbf1b03b62c 100644
--- a/net/rxrpc/local_object.c
+++ b/net/rxrpc/local_object.c
@@ -424,6 +424,9 @@ static void rxrpc_local_processor(struct work_struct *work)
 		container_of(work, struct rxrpc_local, processor);
 	bool again;
 
+	if (local->dead)
+		return;
+
 	trace_rxrpc_local(local->debug_id, rxrpc_local_processing,
 			  atomic_read(&local->usage), NULL);
 
-- 
2.35.3

