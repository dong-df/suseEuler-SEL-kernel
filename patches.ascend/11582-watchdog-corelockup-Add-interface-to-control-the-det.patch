From dd8409a92ea6f4fe24b949e1688743f352153e0e Mon Sep 17 00:00:00 2001
From: Xu Qiang <xuqiang36@huawei.com>
Date: Fri, 26 Nov 2021 16:27:13 +0800
Subject: [PATCH] watchdog/corelockup: Add interface to control the detection
 sensitivity.
Patch-mainline: Not yet, from openEuler
References: bsn#22
openEuler-commit: dd8409a92ea6f4fe24b949e1688743f352153e0e


ascend inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I4F3V1
CVE: NA

--------------------------------

A user-mode interface is added to control the core lockup
detection sensitivity.

Signed-off-by: Xu Qiang <xuqiang36@huawei.com>
Reviewed-by: Ding Tianhong <dingtianhong@huawei.com>
Signed-off-by: Yang Yingliang <yangyingliang@huawei.com>
Reviewed-by: Ding Tianhong <dingtianhong@huawei.com>
Signed-off-by: Zheng Zengkai <zhengzengkai@huawei.com>
Signed-off-by: Guoqing Jiang <guoqing.jiang@suse.com>
---
 include/linux/nmi.h   |  1 +
 kernel/sysctl.c       | 13 +++++++++++++
 kernel/watchdog_hld.c |  4 +++-
 3 files changed, 17 insertions(+), 1 deletion(-)

diff --git a/include/linux/nmi.h b/include/linux/nmi.h
index 6f13b1d7d61b..0cc36b799df6 100644
--- a/include/linux/nmi.h
+++ b/include/linux/nmi.h
@@ -132,6 +132,7 @@ extern void corelockup_detector_offline_cpu(unsigned int cpu);
 extern void watchdog_check_hrtimer(void);
 extern unsigned long watchdog_hrtimer_interrupts(unsigned int cpu);
 extern bool enable_corelockup_detector;
+extern int corelockup_miss_thresh;
 #endif
 
 void watchdog_nmi_stop(void);
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index c7ca58de3b1b..3ab6ea7853ba 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -113,7 +113,9 @@ static int sixty = 60;
 
 static int __maybe_unused neg_one = -1;
 static int __maybe_unused two = 2;
+static int __maybe_unused three = 3;
 static int __maybe_unused four = 4;
+static int __maybe_unused five = 5;
 static unsigned long zero_ul;
 static unsigned long one_ul = 1;
 static unsigned long long_max = LONG_MAX;
@@ -2405,6 +2407,17 @@ static struct ctl_table kern_table[] = {
 	},
 #endif /* CONFIG_SMP */
 #endif
+#ifdef CONFIG_CORELOCKUP_DETECTOR
+	{
+		.procname	= "corelockup_thresh",
+		.data		= &corelockup_miss_thresh,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1		= &three,
+		.extra2		= &five,
+	},
+#endif
 #endif
 
 #if defined(CONFIG_X86_LOCAL_APIC) && defined(CONFIG_X86)
diff --git a/kernel/watchdog_hld.c b/kernel/watchdog_hld.c
index ee1fce089593..8af4ab738ce9 100644
--- a/kernel/watchdog_hld.c
+++ b/kernel/watchdog_hld.c
@@ -83,6 +83,7 @@ static DEFINE_PER_CPU(unsigned long, hrint_saved);
 static DEFINE_PER_CPU(unsigned long, hrint_missed);
 static unsigned long corelockup_allcpu_dumped;
 bool enable_corelockup_detector;
+int __read_mostly corelockup_miss_thresh = 5;
 
 static int __init enable_corelockup_detector_setup(char *str)
 {
@@ -169,7 +170,8 @@ void watchdog_check_hrtimer(void)
 	}
 	__this_cpu_inc(nmi_cnt_missed);
 
-	if ((__this_cpu_read(hrint_missed) > 5) && (__this_cpu_read(nmi_cnt_missed) > 5)) {
+	if ((__this_cpu_read(hrint_missed) > corelockup_miss_thresh)
+		 && (__this_cpu_read(nmi_cnt_missed) > corelockup_miss_thresh)) {
 		pr_emerg("Watchdog detected core LOCKUP on cpu %d\n", cpu);
 
 		if (!test_and_set_bit(0, &corelockup_allcpu_dumped)) {
-- 
2.26.2

